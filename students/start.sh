#!/bin/bash
# Student Directory Initialization Script
# Creates a new self-contained student workspace following framework principles
# This is the ONLY manual setup - everything else goes through sync system

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Helper function to get professor directory
get_professor_directory() {
    # Try to get from class_template/course.yml
    if [ -f "../class_template/course.yml" ]; then
        local prof_dir
        prof_dir=$(grep -E "^[[:space:]]*professor_directory:" "../class_template/course.yml" | cut -d':' -f2- | xargs)
        if [ -n "$prof_dir" ] && [ "$prof_dir" != "\"\"" ] && [ "$prof_dir" != "''" ]; then
            echo "$prof_dir"
            return
        fi
    fi
    
    # Default fallback
    echo "professor"
}

echo -e "${BLUE}🎓 Student Directory Initialization${NC}"
echo "======================================"

# Check if we're in the students directory
if [ "$(basename "$PWD")" != "students" ]; then
    echo -e "${RED}❌ Error: This script must be run from the 'students/' directory${NC}"
    echo "Current directory: $PWD"
    exit 1
fi

# Check if professor directory exists
if [ ! -d "../professor" ]; then
    echo -e "${RED}❌ Error: Professor directory not found${NC}"
    echo "This script must be run from a class template repository"
    exit 1
fi

# Get student username
if [ $# -eq 1 ]; then
    STUDENT_NAME="$1"
else
    echo -e "${YELLOW}📝 Enter your GitHub username (this will be your directory name):${NC}"
    read -p "Username: " STUDENT_NAME
fi

# Validate username
if [ -z "$STUDENT_NAME" ]; then
    echo -e "${RED}❌ Error: Username cannot be empty${NC}"
    exit 1
fi

# Check if directory already exists
if [ -d "$STUDENT_NAME" ]; then
    echo -e "${RED}❌ Error: Directory '$STUDENT_NAME' already exists${NC}"
    echo "Use the sync script to update an existing directory"
    exit 1
fi

echo -e "${BLUE}📁 Creating student directory: ${NC}$STUDENT_NAME"

# Create student directory
mkdir -p "$STUDENT_NAME"
cd "$STUDENT_NAME"

echo -e "${YELLOW}📋 Setting up self-contained workspace...${NC}"

# Create student-specific directories
mkdir -p "class_notes"
mkdir -p "personal_projects"

# Copy personal configuration files
echo -e "${YELLOW}📝 Setting up personal configuration...${NC}"

# Copy config.yml if it exists in professor directory
PROFESSOR_DIR=$(get_professor_directory)
if [ -f "../../$PROFESSOR_DIR/config.yml" ]; then
    cp "../../$PROFESSOR_DIR/config.yml" "config.yml"
    echo "✓ Copied config.yml for personal customization"
fi

# Copy or create home.md
if [ -f "../../$PROFESSOR_DIR/home.md" ]; then
    cp "../../$PROFESSOR_DIR/home.md" "home.md"
    echo "✓ Copied home.md template"
else
    # Create basic home.md template
    cat > home.md << EOF
---
title: "$STUDENT_NAME's Homepage"
type: home
date: $(date +%Y-%m-%d)
author: "$STUDENT_NAME"
---

# Welcome to My Class Site

This is my personal homepage for the class.

## About Me

[Add information about yourself here]

## My Work

- [Class Notes](class_notes/)
- [Personal Projects](personal_projects/)
EOF
    echo "✓ Created personal home.md"
fi

# Create build.yml at repository root for this student
cd "../../"
cat > build.yml << EOF
# Student Build Configuration for $STUDENT_NAME
# Auto-generated by students/start.sh - customize as needed

# Build target configuration
build:
  # Directory to build (this student's workspace)
  target_directory: "students/$STUDENT_NAME"
  
  # Build mode
  mode: "student"
  
  # Development server settings
  dev_server:
    # Port for development server (students use 1314)
    port: 1314
    
    # Auto-open browser when starting dev server
    open_browser: false
    
    # Watch for changes and auto-reload
    live_reload: true

# Build options
options:
  # Skip confirmation prompts
  force_build: false
  
  # Enable verbose output for debugging
  verbose: false
  
  # Clean hugo_generated before building
  clean_before_build: false

# User identification
user:
  # Your GitHub username
  github_username: "$STUDENT_NAME"
  
  # Your role in this repository
  role: "student"

# Directory structure (from class_template/course.yml)
structure:
  # Professor directory name (where content is synced from)
  professor_directory: "professor"

# Hugo configuration
hugo:
  # Hugo command to use
  command: "hugo"
  
  # Additional Hugo flags
  flags: []
  
  # Environment variables for Hugo build
  environment:
    HUGO_ENV: "development"
EOF

# Go back to student directory
cd "students/$STUDENT_NAME"

# Create student-specific README
cat > README.md << 'EOF'
# Student Workspace

This is your personal workspace within the class template framework.

## 🚀 Getting Started

**All commands are run from the repository root (../../ from this directory):**

1. **Navigate to repository root**:
   ```bash
   cd ../../
   ```

2. **Keep synchronized**: Run sync regularly to get class content updates
   ```bash
   ./manage.sh --sync
   ```

3. **Generate your site**: Build your personal website
   ```bash
   ./manage.sh --build
   ```

4. **View your site**: Open `hugo_generated/public/index.html` in repository root

5. **Development server**: Start live development server
   ```bash
   ./manage.sh --dev
   ```

## 📁 Directory Structure

- `class_notes/` - Your personal notes and solutions (synced from professor)
- `personal_projects/` - Your own projects and experiments
- `config.yml` - Your personal rendering preferences (copied for customization)
- `home.md` - Your homepage content
- `README.md` - This file with instructions

## 📝 Customization

You can:
- Modify `config.yml` for personal preferences (theme, colors, etc.)
- Edit `home.md` to customize your homepage
- Add your own content in `class_notes/` and `personal_projects/`
- Framework themes are shared at `../../framework/themes/`
- All builds use the shared framework at `../../framework/`

## 🔄 Staying Updated

**Important**: Always run commands from the repository root (../../)

```bash
cd ../../
./manage.sh --sync
```

The sync script will:
- ✅ Add new class content from the instructor  
- ✅ Update class_notes that haven't been modified
- ❌ **Never overwrite** your personal work (config.yml, home.md, personal content)
- ✅ Preserve content in `<!-- KEEP -->` blocks
- 🎯 **Only syncs class content** (not framework - that's shared)

## 🏗️ Framework Architecture

- **Build Configuration**: Root-level `build.yml` (configured for your workspace)
- **Framework**: Shared at repository root (`../../framework/`)
- **Build Output**: Shared at repository root (`../../hugo_generated/`)
- **Your Content**: Lives in this directory
- **Command Execution**: All commands run from repository root

## 🚨 Important Notes

- **Never run commands from this directory** - always use the repository root
- Your `build.yml` is at the repository root and configured for your workspace
- Personal files (`config.yml`, `home.md`) stay in your directory for customization

Happy learning! 🎉
EOF

# Run initial sync from repository root
cd ../../
echo -e "${YELLOW}🔄 Running initial sync...${NC}"
./manage.sh --sync --force

# Run initial build from repository root (stay at root level)
echo -e "${YELLOW}🔧 Running initial build...${NC}"
./manage.sh --validate --force

echo -e "${GREEN}✅ Student workspace initialized successfully!${NC}"
echo ""
echo -e "${BLUE}📋 What was created:${NC}"
echo "• Student workspace: students/$STUDENT_NAME/"
echo "• Root-level build.yml configuration"
echo "• Personal configuration files (config.yml, home.md)"
echo "• Basic directory structure for your work"
echo "• Initial content sync completed"
echo ""
echo -e "${PURPLE}🚀 Next steps (all from repository root):${NC}"
echo "1. cd ../../ (go to repository root)"
echo "2. Customize students/$STUDENT_NAME/config.yml preferences"
echo "3. Start adding content to students/$STUDENT_NAME/class_notes/"
echo "4. Run './manage.sh --build' to build your personal website"
echo "5. Run './manage.sh --dev' to start development server"  
echo "6. Use './manage.sh --sync' regularly to get class content updates"
echo ""
echo -e "${GREEN}🎉 Happy learning!${NC}" 