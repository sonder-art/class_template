---
title: "Complete Scripts Reference"
subtitle: "Detailed Documentation for All Automation Tools"
format:
  html:
    css:
      - ../../../quarto_code/styles/main.css
      - ../../../quarto_code/styles/themes/evangelion.css
    toc: true
---

# Complete Scripts Reference

> **üìö Comprehensive Tool Documentation**  
> Detailed reference for every automation script, from the primary tools that 99% of users need to the helper scripts for advanced customization.

## üéØ Primary Tools (Start Here)

### `master_update.py` ‚≠ê **THE MAIN TOOL**

**Purpose:** Complete project automation - runs everything in the correct order

**Location:** `your_username/quarto_code/scripts/master_update.py`

**When to use:** After adding content, once per session, whenever you want everything updated

#### Basic Usage

```bash
cd your_username/quarto_code/scripts

# Complete update (recommended)
python3 master_update.py

# With detailed output
python3 master_update.py --verbose

# Force update everything (ignore change detection)
python3 master_update.py --force

# Validation only (no changes)
python3 master_update.py --validation-only
```

#### What It Does

1. **Project Structure Validation** - Ensures naming conventions and file organization
2. **Content Structure Analysis** - Scans all chapters and sections for content discovery
3. **Smart Index Generation** - Updates directory indexes with content preservation
4. **Navigation Update** - Synchronizes navigation components and navbar
5. **Enhanced Navigation Generation** - Creates advanced navigation data
6. **Final Validation & Cleanup** - Verifies everything is working and cleans up

#### Command Options

| Option | Description | Example |
|--------|-------------|---------|
| `--force` | Force update all content regardless of changes | `--force` |
| `--verbose` / `-v` | Detailed output with progress information | `--verbose` |
| `--validation-only` | Run only validation steps (no updates) | `--validation-only` |

#### Example Output

```
üöÄ Master Update System
User: your_username | Force: false | Verbose: true

Processing...
üîç Step 1: Project Structure Validation
‚úÖ Project structure validation passed

üìä Step 2: Content Structure Analysis  
‚úÖ Found 3 chapters with 12 sections

üìù Step 3: Smart Index Generation
‚úÖ Updated 5 directory indexes

üß≠ Step 4: Navigation Update
‚úÖ Updated 3 nav files, 5 index files

üéõÔ∏è Step 5: Enhanced Navigation Generation
‚úÖ Generated enhanced navigation data

üîç Step 6: Final Validation & Cleanup
‚úÖ Final validation passed - project is clean!

üéâ Master Update Complete!
Duration: 4.2 seconds
```

---

### `smart_auto_generator.py` ‚≠ê **WATCH MODE & CONTENT PRESERVATION**

**Purpose:** Intelligent content generation with real-time updates and content preservation

**Location:** `your_username/quarto_code/scripts/smart_auto_generator.py`

**When to use:** During active content creation for automatic updates

#### Basic Usage

```bash
# Real-time auto-updates (leave running)
python3 smart_auto_generator.py --watch

# Smart update (only changed files)
python3 smart_auto_generator.py

# Force update all content
python3 smart_auto_generator.py --force-update

# Preview what would be updated
python3 smart_auto_generator.py --dry-run
```

#### Watch Mode Features

**Real-time monitoring:**
- üíæ File saves trigger index updates instantly
- üìÅ Directory creation refreshes navigation
- ‚úèÔ∏è Content preservation protects your work
- üîç Validation runs automatically
- ‚ö° Changes appear immediately

**Leave running while you develop content!**

#### Content Preservation System

Uses intelligent markers to preserve your content:

```markdown
<!-- AUTO-INDEX-START -->
...automatically generated navigation and structure...
<!-- AUTO-INDEX-END -->

<!-- USER-CONTENT-START -->
## Your Custom Content Here
Write anything you want - this will NEVER be overwritten!
<!-- USER-CONTENT-END -->
```

#### Command Options

| Option | Description | Example |
|--------|-------------|---------|
| `--watch` | Monitor files for changes and auto-update | `--watch` |
| `--force-update` | Force update all content | `--force-update` |
| `--verbose` / `-v` | Detailed output | `--verbose` |

---

## üîß Helper Scripts (Advanced Users)

### `config_utils.py` - Dynamic Path Resolution

**Purpose:** Provides portable path resolution for all other scripts

**Key Features:**
- **Auto-detects** project structure from `_quarto.yml`
- **Uses `user_name`** from metadata for dynamic paths
- **Eliminates hardcoded paths** throughout the system
- **Validates** project structure integrity

**Functions for developers:**
```python
from config_utils import resolve_content_paths, get_user_name

# Get all resolved paths
paths = resolve_content_paths()
user_name = paths['user_name']
project_root = paths['project_root']

# Validate project structure
is_valid = validate_project_structure()
```

### `scan_structure.py` - Content Discovery Engine

**Purpose:** Configuration-based content structure analysis with explicit inclusion patterns

#### Usage

```bash
# Auto-detects paths from _quarto.yml
python3 scan_structure.py

# With detailed output
python3 scan_structure.py --verbose

# Save structure data for other tools
python3 scan_structure.py --output structure.json

# Validation only
python3 scan_structure.py --validate
```

#### Configuration-Based Discovery

**The system now uses explicit inclusion instead of exclusion patterns:**

```python
# Content directories to scan (lines 51-55)
CONTENT_DIRECTORIES = {
    'notas',                    # Standard educational content
    'quarto_development',       # Documentation and guides
}

# Special handling for non-standard directories (lines 57-65)
SPECIAL_DIRECTORIES = {
    'quarto_development': {
        'allow_non_standard_names': True,   # Allow any directory names
        'scan_subdirectories': True,        # Scan all subdirectories
    }
}
```

#### What It Discovers

- **Multiple content areas:** Scans all configured directories in `CONTENT_DIRECTORIES`
- **Standard chapters:** Directories matching `NN_name/` pattern in regular content areas
- **Special chapters:** Any directory name in areas marked `allow_non_standard_names: True`
- **Sections:** Sub-directories and files within all chapter types
- **YAML Frontmatter:** Extracts titles and metadata from `.qmd` files
- **File Statistics:** Counts content files and generates metrics across all areas
- **Hierarchical Structure:** Creates unified data representation from multiple sources

#### Adding New Content Areas

**Step 1:** Edit `CONTENT_DIRECTORIES` in `scan_structure.py`

```python
CONTENT_DIRECTORIES = {
    'notas',
    'quarto_development', 
    'your_new_area',           # ‚Üê Add here
}
```

**Step 2:** Configure special rules if needed

```python
SPECIAL_DIRECTORIES = {
    'your_new_area': {
        'allow_non_standard_names': True,
        'scan_subdirectories': True,
    }
}
```

**Step 3:** Run and verify

```bash
python3 scan_structure.py --verbose
# Should show: "üîç Scanning content directory: your_new_area"
```

#### Output Format

```json
{
  "scan_timestamp": "2025-01-16T...",
  "user_name": "your_username",
  "base_path": "/path/to/project",
  "content_path": "/path/to/notas",
  "chapters": [
    {
      "name": "01_intro",
      "prefix": "01", 
      "title": "Introduction to Course",
      "path": "/path/to/notas/01_intro",
      "has_index": true,
      "index_file": "00_index.qmd",
      "sections": [...]
    }
  ],
  "stats": {
    "total_chapters": 3,
    "total_sections": 12,
    "total_files": 25
  }
}
```

### `validate_structure.py` - Quality Assurance Engine

**Purpose:** Comprehensive structure validation with actionable suggestions

#### Usage

```bash
# Full validation with visual output
python3 validate_structure.py

# Show only errors
python3 validate_structure.py --strict

# Get actionable fix suggestions  
python3 validate_structure.py --fix-suggestions

# CI-friendly mode
python3 validate_structure.py --ci
```

#### Validation Categories

**ERROR (Must Fix):**
- Invalid naming patterns (not `NN_name` format)
- Missing required index files
- Broken path references in CSS/links
- Duplicate chapter/section prefixes
- Invalid YAML frontmatter syntax

**WARNING (Should Fix):**
- Missing navigation files (`_nav.qmd`)
- Non-sequential numbering
- Empty sections with no content
- Inconsistent title formatting

**INFO (Optimization):**
- Suggested improvements
- Structure statistics
- Performance recommendations

### `generate_navigation.py` - Navbar Generation Engine

**Purpose:** Auto-generates navbar while preserving existing configuration

#### Usage

```bash
# Preview changes (recommended first step)
python3 generate_navigation.py --dry-run

# Apply changes with automatic backup
python3 generate_navigation.py

# Force apply without confirmation  
python3 generate_navigation.py --force

# List available backups
python3 generate_navigation.py --list-backups

# Restore from backup
python3 generate_navigation.py --restore backup_file.yml
```

#### Safety Features

- **Automatic backups** before any changes
- **Validation testing** ensures generated YAML is valid
- **Rollback capability** for automatic restoration on failures
- **Dry-run mode** to preview changes without applying them
- **Element preservation** maintains existing navbar components

### `update_nav_components.py` - Navigation Component Updater

**Purpose:** Updates JavaScript, HTML, and Markdown navigation components

#### Usage

```bash
# Update all navigation components
python3 update_nav_components.py

# Preview changes without applying
python3 update_nav_components.py --dry-run

# Create missing files (syllabus.qmd, schedule.qmd)
python3 update_nav_components.py --create-missing

# Verbose output
python3 update_nav_components.py --verbose
```

#### What It Updates

- **JavaScript Arrays:** Navigation data for each chapter
- **HTML Breadcrumbs:** Interactive navigation dropdowns
- **Markdown Links:** Section overview links in callouts
- **Chapter Indexes:** Setup checklists with correct links

### `generate_collapsible_nav.py` - Enhanced Navigation Data

**Purpose:** Generates advanced navigation data for modern UI components

#### Usage

```bash
# Generate JSON and JavaScript navigation data
python3 generate_collapsible_nav.py

# Generate only JSON format
python3 generate_collapsible_nav.py --output-format json

# Generate with templates
python3 generate_collapsible_nav.py --generate-templates

# Custom output directory
python3 generate_collapsible_nav.py --output-dir custom/path/
```

#### Generated Files

- **`navigation-data.json`:** Structured navigation data
- **`navigation-data.js`:** Ready-to-use JavaScript modules
- **Enhanced metadata:** Content analysis and navigation metrics
- **Template files:** For advanced UI components

---

## üîÑ Script Integration Patterns

### Sequential Processing

```bash
# Complete workflow
python3 scan_structure.py --output temp.json
python3 validate_structure.py --input temp.json --ci
python3 generate_navigation.py --force
cd .. && quarto render
```

### Error Handling Chain

```bash
#!/bin/bash
set -e  # Exit on any error

echo "üîç Validating structure..."
python3 validate_structure.py --ci || {
    echo "‚ùå Validation failed - see suggestions:"
    python3 validate_structure.py --fix-suggestions
    exit 1
}

echo "üß≠ Generating navigation..."
python3 generate_navigation.py --force || {
    echo "‚ùå Navigation generation failed"
    exit 1
}

echo "üèóÔ∏è Building site..."
cd .. && quarto render || {
    echo "‚ùå Site build failed - restoring backup"
    cd quarto_code/scripts
    python3 generate_navigation.py --list-backups
    exit 1
}

echo "‚úÖ All systems operational!"
```

### Data Flow Integration

```python
# Example integration pattern
from config_utils import resolve_content_paths
from scan_structure import scan_content_structure
from validate_structure import StructureValidator
from smart_auto_generator import SmartAutoGenerator

# 1. Auto-resolve paths (no hardcoding!)
paths = resolve_content_paths()

# 2. Discovery with dynamic paths
structure_data = scan_content_structure()

# 3. Validation
validator = StructureValidator()
is_valid = validator.validate_structure(structure_data)

# 4. Smart generation with content preservation
if is_valid:
    generator = SmartAutoGenerator()
    generator.process_directory_indexes()
```

## üéØ Usage Recommendations

### For Students (99% of Use Cases)

**Primary workflow:**
```bash
# Change user_name in _quarto.yml, then:
cd your_username/quarto_code/scripts
python3 master_update.py
```

**Optional real-time mode:**
```bash
python3 smart_auto_generator.py --watch
```

### For Content Creators

**Daily workflow:**
```bash
# Option 1: Manual updates
python3 master_update.py

# Option 2: Watch mode
python3 smart_auto_generator.py --watch
```

**Content maintenance:**
```bash
# Validate structure
python3 master_update.py --validation-only

# Fix issues
python3 validate_structure.py --fix-suggestions

# Force refresh everything
python3 master_update.py --force
```

### For Developers

**Development workflow:**
```bash
# Debug mode
python3 master_update.py --verbose > debug.log 2>&1

# Test individual components
python3 scan_structure.py --verbose
python3 validate_structure.py --fix-suggestions
python3 generate_navigation.py --dry-run

# Integration testing
python3 master_update.py --validation-only
```

**Extension development:**
```python
# Import existing functionality
from scan_structure import scan_content_structure
from config_utils import resolve_content_paths

# Build new automation features
def custom_automation():
    paths = resolve_content_paths()
    structure = scan_content_structure()
    # Your custom logic here
```

## üìä Performance and Scalability

### Resource Usage

| Operation | Typical Time | Memory | Disk Usage |
|-----------|-------------|--------|------------|
| Content Scan | <1s | <10MB | Negligible |
| Structure Validation | <2s | <15MB | Report files |
| Navigation Generation | <1s | <5MB | Backup files |
| Complete Master Update | <5s | <25MB | <1MB total |
| Watch Mode (idle) | N/A | <20MB | Log files |

### Optimization Tips

**Large content structures (50+ chapters):**
- Use `--output` to save scan results and reuse
- Run validation in `--strict` mode for faster CI
- Consider incremental navbar updates

**Development workflow:**
- Use `--dry-run` extensively during development
- Keep recent backups for quick rollback
- Test with small content sets first

**Production deployment:**
- Always use backup-enabled generation
- Run full validation before deployment
- Monitor backup disk usage

---

**üõ†Ô∏è Need to extend the system?** All scripts follow consistent patterns with `click` CLI interfaces, `rich` output, and modular designs. Check the source code for implementation details and extension points! 