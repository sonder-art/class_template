---
title: "Content Creation Workflows"
subtitle: "Focus on Writing, Automation Handles the Rest"
format:
  html:
    css:
      - ../../../quarto_code/styles/main.css
      - ../../../quarto_code/styles/themes/evangelion.css
    toc: true
---

# Content Creation Workflows

> **‚úçÔ∏è Write First, Automate Second**  
> This guide shows how to create educational content efficiently using the automation system's content preservation features.

## üéØ Content Creation Philosophy

### The Golden Rule: Focus on Content

**You handle:** Writing, teaching, examples, explanations
**Automation handles:** Structure, navigation, organization, formatting

### Content Preservation System

The automation system **NEVER** overwrites your content. It uses intelligent markers:

```markdown
<!-- AUTO-INDEX-START -->
This section is automatically generated - don't edit directly
- Chapter overview
- Navigation links  
- Section summaries
<!-- AUTO-INDEX-END -->

<!-- USER-CONTENT-START -->
## Your Content Here
Write anything you want - this will NEVER be overwritten!

- Your teaching style
- Custom examples
- Personal explanations
- Special formatting
<!-- USER-CONTENT-END -->
```

## üìù Daily Content Creation

### Real-time Development Workflow

**Recommended for active content creation:**

```bash
# 1. Start watch mode (leave running)
cd your_username/quarto_code/scripts
python3 smart_auto_generator.py --watch

# 2. Open another terminal for your work
cd your_username/notas

# 3. Create and edit content - everything updates automatically!
```

**What happens as you work:**
- üíæ Save a file ‚Üí indexes update instantly
- üìÅ Create a directory ‚Üí navigation refreshes
- ‚úèÔ∏è Edit content ‚Üí preservation system protects your work
- üîç Validation runs ‚Üí immediate feedback on issues

### Manual Update Workflow

**For occasional content updates:**

```bash
# After creating/editing content
cd your_username/quarto_code/scripts
python3 master_update.py

# Build and preview
cd .. && quarto render && quarto preview
```

## üìö Content Structure Patterns

### Creating a New Chapter

**1. Create the chapter directory:**
```bash
mkdir your_username/notas/03_new_chapter
```

**2. Add initial content:**
```bash
# Create the first section
echo "# Getting Started" > your_username/notas/03_new_chapter/01_getting_started.qmd
```

**3. Update automation:**
```bash
cd your_username/quarto_code/scripts
python3 master_update.py
```

**Result:** Chapter appears in navbar automatically with proper navigation!

### Adding Sections to a Chapter

**Option A: Section as a file**
```bash
echo "# Advanced Topics" > your_username/notas/01_intro/05_advanced.qmd
```

**Option B: Section as a directory**
```bash
mkdir your_username/notas/01_intro/05_advanced
echo "# Advanced Overview" > your_username/notas/01_intro/05_advanced/01_overview.qmd
echo "# Advanced Details" > your_username/notas/01_intro/05_advanced/02_details.qmd
```

Both approaches work - the automation system detects and handles them properly!

### Working with Index Pages

**Understanding auto-generated indexes:**

Every directory gets a `00_index.qmd` that looks like this:

```markdown
---
title: "Chapter Title"
---

# Chapter Title

<!-- AUTO-INDEX-START -->
## Chapter Contents
1. [First Section](01_section/00_index.qmd)
2. [Second Section](02_section.qmd)
...
<!-- AUTO-INDEX-END -->

<!-- USER-CONTENT-START -->
<!-- Add your custom content here - it will be preserved -->
<!-- USER-CONTENT-END -->
```

**Adding your content to indexes:**

```markdown
<!-- USER-CONTENT-START -->
## Learning Objectives

By the end of this chapter, you will:
- Understand key concepts
- Complete practical exercises
- Build real projects

## Prerequisites

Before starting, you should:
- Have completed previous chapters
- Installed required software
- Read the background materials

## Additional Resources

- [External tutorial](https://example.com)
- [Reference documentation](https://docs.example.com)
- [Video walkthrough](https://youtube.com/example)
<!-- USER-CONTENT-END -->
```

## ‚úçÔ∏è Content Writing Best Practices

### Markdown and Quarto Features

**Use Quarto's educational features:**

```markdown
---
title: "My Lesson"
format:
  html:
    css:
      - ../../quarto_code/styles/main.css
      - ../../quarto_code/styles/themes/evangelion.css
    toc: true
    code-fold: true
---

# My Lesson

## Learning Objectives

::: {.callout-tip}
### What You'll Learn
- Key concept 1
- Key concept 2
:::

## Code Examples

```python
# Your code here
def example():
    return "Hello, World!"
```

## Practice Exercise

::: {.callout-note}
### Try This
Create your own version of the code above.
:::
```

### Content Organization Tips

**Chapter-level content:**
- Overview and learning objectives
- Prerequisites and setup
- High-level concepts
- Resources and next steps

**Section-level content:**
- Specific topics and details
- Step-by-step tutorials
- Practice exercises
- Code examples

**File-level content:**
- Individual lessons or topics
- Focused explanations
- Specific exercises
- Reference materials

## üîÑ Content Update Workflows

### Updating Existing Content

**Your content files (always safe to edit):**
- `01_lesson.qmd`, `02_practice.qmd` - your actual content
- Content between `<!-- USER-CONTENT-START -->` markers
- Custom sections you add

**Auto-generated content (don't edit directly):**
- `00_index.qmd` files (except between USER-CONTENT markers)
- Navigation sections
- Automatic summaries

### Adding Content Progressively

**1. Start with structure:**
```bash
# Create chapter and section directories
mkdir -p your_username/notas/04_advanced/{01_concepts,02_practice,03_projects}
```

**2. Add placeholder content:**
```bash
echo "# Advanced Concepts" > your_username/notas/04_advanced/01_concepts/01_overview.qmd
echo "# Practice Exercises" > your_username/notas/04_advanced/02_practice/01_exercises.qmd
echo "# Final Projects" > your_username/notas/04_advanced/03_projects/01_projects.qmd
```

**3. Update navigation:**
```bash
cd your_username/quarto_code/scripts && python3 master_update.py
```

**4. Fill in content over time:**
- Edit the placeholder files
- Add more files as needed
- Automation keeps everything organized

### Collaborative Content Creation

**Working with multiple authors:**

```bash
# Each author works in their namespace
author1/notas/01_intro/     # Author 1's content
author2/notas/01_intro/     # Author 2's content
shared/resources/           # Shared materials
```

**Sharing content between namespaces:**
- Copy useful content to your namespace
- Reference shared resources in `shared/`
- Use Git to merge improvements

## üé® Customization and Theming

### Using Built-in Themes

**Available themes in `quarto_code/styles/themes/`:**
- `evangelion.css` - Purple and green theme
- `cyberpunk.css` - Dark tech theme
- `_template.css` - Create your own

**Apply themes to your content:**
```yaml
---
title: "My Lesson"
format:
  html:
    css:
      - ../../quarto_code/styles/main.css
      - ../../quarto_code/styles/themes/cyberpunk.css
---
```

### Creating Custom Styles

**Add custom CSS to your content:**

```markdown
---
title: "Styled Lesson"
format:
  html:
    css:
      - ../../quarto_code/styles/main.css
      - custom_styles.css
---

<style>
.my-special-box {
  background: #f0f0f0;
  padding: 1rem;
  border-left: 4px solid #007acc;
}
</style>

<div class="my-special-box">
Your special content here
</div>
```

## üìä Content Quality and Validation

### Built-in Quality Checks

**The automation system validates:**
- ‚úÖ Naming conventions (01_, 02_, etc.)
- ‚úÖ Required files exist
- ‚úÖ YAML frontmatter is valid
- ‚úÖ Links are working
- ‚úÖ CSS paths are correct

**Run validation manually:**
```bash
cd your_username/quarto_code/scripts
python3 master_update.py --validation-only
```

### Content Review Workflow

**Before publishing/submitting:**

1. **Validate structure:**
   ```bash
   python3 master_update.py --validation-only
   ```

2. **Build and check:**
   ```bash
   cd .. && quarto render
   ```

3. **Preview locally:**
   ```bash
   quarto preview
   ```

4. **Check all links work:**
   - Navigate through your site
   - Test all navigation elements
   - Verify external links

## üöÄ Advanced Content Patterns

### Interactive Content

**Using Quarto's interactive features:**

```markdown
## Interactive Code

```{python}
#| echo: true
#| eval: true

import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(0, 10, 100)
y = np.sin(x)

plt.figure(figsize=(10, 6))
plt.plot(x, y)
plt.title("Sine Wave")
plt.show()
```

## Multi-format Content

**Create content for multiple outputs:**

```yaml
---
title: "Multi-format Lesson" 
format:
  html:
    css: ../../quarto_code/styles/main.css
    toc: true
  pdf:
    toc: true
  docx:
    toc: true
---
```

## üéØ Content Creation Tips

### Efficient Writing Workflow

1. **Plan structure first** - create directories and placeholder files
2. **Use watch mode** - `python3 smart_auto_generator.py --watch`
3. **Write content incrementally** - the system handles organization
4. **Validate frequently** - catch issues early
5. **Preview often** - `quarto preview` to see results

### Common Content Patterns

**Lesson structure:**
```markdown
# Lesson Title

## Learning Objectives
## Prerequisites  
## Main Content
## Practice Exercises
## Summary
## Resources
```

**Exercise structure:**
```markdown
# Exercise: Topic

## Problem Description
## Given Code/Data
## Your Task
## Expected Output
## Solution (hidden with code-fold)
```

**Reference structure:**
```markdown
# Reference: Topic

## Quick Summary
## Detailed Explanation
## Examples
## Common Issues
## See Also
```

---

**üéØ Ready to create?** Use these workflows to focus on what you do best - creating great educational content. The automation system handles all the technical organization, so you can concentrate on teaching and writing! 