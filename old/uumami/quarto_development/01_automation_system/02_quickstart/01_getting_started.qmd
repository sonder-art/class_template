---
title: "Getting Started - 5 Minutes to Automation"
subtitle: "Simple Setup for Students"
format:
  html:
    css:
      - ../../../quarto_code/styles/main.css
      - ../../../quarto_code/styles/themes/evangelion.css
    toc: true
---

# Getting Started - 5 Minutes to Automation

> **‚ö° Three Steps to Success**  
> This guide gets you from "fork the repo" to "fully automated website" in under 5 minutes.

## üìã Prerequisites (Quick Check)

Before starting, make sure you have:

- [ ] **Python 3.8+** installed (`python3 --version`)
- [ ] **Quarto 1.3+** installed (`quarto --version`)  
- [ ] **Forked/cloned** the course repository
- [ ] **Basic terminal** access

### Install Missing Dependencies

```bash
# Install Python packages (if needed)
pip install pyyaml click rich

# Verify Quarto works (if needed)
quarto --version
```

## üöÄ The 3-Step Setup

### Step 1: Change Your Username

**Edit `_quarto.yml` in your repository root:**

```yaml
metadata:
  user_name: your_github_username  # ‚Üê Change this line!
  # ... keep everything else the same
```

**Critical:** Use your actual GitHub username. This makes all paths work automatically.

### Step 2: Run Master Update

**Navigate to scripts and run the automation:**

```bash
# Navigate to your repository
cd your_repository_name

# Go to automation scripts
cd your_username/quarto_code/scripts

# Run the master update
python3 master_update.py
```

**What happens:**
- ‚úÖ Scans your content structure
- ‚úÖ Validates naming conventions
- ‚úÖ Generates navigation automatically
- ‚úÖ Creates missing directory indexes
- ‚úÖ Updates everything safely with backups

### Step 3: Verify Everything Works

**Test your site:**

```bash
# Go back to your user directory
cd ..

# Render your site
quarto render

# Preview locally (optional)
quarto preview
```

**You're done!** üéâ

## üîÑ Daily Workflow

### Option A: Manual Updates (Recommended for Beginners)

**After adding or changing content:**
```bash
cd your_username/quarto_code/scripts
python3 master_update.py
```

Run this whenever you:
- Add new chapters or sections
- Want to refresh everything
- Haven't used the system in a while

### Option B: Real-time Updates (Power Users)

**For automatic updates while you work:**
```bash
cd your_username/quarto_code/scripts
python3 smart_auto_generator.py --watch
```

Now every time you save a file:
- üîÑ Indexes update automatically
- üß≠ Navigation refreshes instantly
- ‚úÖ Structure gets validated
- üõ°Ô∏è Your content is preserved

**Leave this running while you develop content!**

## üìÅ Content Creation Patterns

### Adding a New Chapter

```bash
# 1. Create the directory
mkdir your_username/notas/03_new_chapter

# 2. Add some content
echo "# My New Chapter" > your_username/notas/03_new_chapter/01_intro.qmd

# 3. Update automation
cd your_username/quarto_code/scripts
python3 master_update.py
```

**Result:** Navbar automatically includes your new chapter!

### Adding Sections to a Chapter

```bash
# 1. Create section directory
mkdir your_username/notas/01_intro/09_new_section

# 2. Add content
echo "# New Section" > your_username/notas/01_intro/09_new_section/01_content.qmd

# 3. Update (if not using watch mode)
python3 master_update.py
```

**Result:** Section appears in chapter navigation automatically!

## ‚öôÔ∏è Adding New Content Areas

**Need to organize content outside of `notas/`?** The system now supports multiple content directories with simple configuration.

### Quick Setup

**Step 1:** Edit `your_username/quarto_code/scripts/scan_structure.py` (lines 51-55)

```python
CONTENT_DIRECTORIES = {
    'notas',                    # Your main educational content
    'quarto_development',       # Already configured
    'my_new_area',             # ‚Üê Add your new directory here
}
```

**Step 2:** If your new area doesn't follow `01_name`, `02_name` patterns, configure special handling:

```python
SPECIAL_DIRECTORIES = {
    'my_new_area': {
        'allow_non_standard_names': True,   # Allow any directory names
        'scan_subdirectories': True,        # Scan all subdirectories
    }
}
```

**Step 3:** Create and populate your directory

```bash
# Create new content area
mkdir your_username/my_new_area

# Add content (can follow any naming you want if configured as special)
mkdir your_username/my_new_area/documentation
mkdir your_username/my_new_area/examples
```

**Step 4:** Run automation

```bash
cd your_username/quarto_code/scripts
python3 master_update.py
# Should show: "üîç Scanning content directory: my_new_area"
```

**Result:** Your new content area is automatically included in site navigation and index generation!

## üéØ Naming Convention Quick Reference

**Required patterns for automation to work:**

| Type | Pattern | Example | Auto-Generated |
|------|---------|---------|----------------|
| **Chapters** | `NN_name/` | `01_intro/`, `02_python/` | ‚ùå Manual |
| **Sections** | `NN_name/` | `01_basics/`, `02_advanced/` | ‚ùå Manual |
| **Content** | `NN_name.qmd` | `01_overview.qmd`, `02_details.qmd` | ‚ùå Manual |
| **Indexes** | `00_index.qmd` | `00_index.qmd` | ‚úÖ Auto-generated |

**Key Rules:**
- Use `01`, `02`, `03` etc. (not `1`, `2`, `3`)
- Use underscores: `python_basics` (not `python-basics` or `python basics`)
- Don't edit `00_index.qmd` files - they're auto-generated

## üö® Common Issues & Quick Fixes

### "Structure validation failed"

**Problem:** Your naming doesn't follow conventions

**Solution:**
```bash
# See what's wrong
python3 master_update.py --validation-only

# Get specific fix suggestions
python3 validate_structure.py . --fix-suggestions
```

### "Navigation generation failed"

**Problem:** Something's wrong with your `_quarto.yml` or structure

**Solution:**
```bash
# Restore from backup
python3 generate_navigation.py --list-backups
python3 generate_navigation.py --restore [backup_file]

# Then fix the underlying issue and try again
python3 master_update.py
```

### "Site won't render"

**Problem:** Quarto can't build your site

**Solution:**
```bash
# Check for broken links or YAML errors
quarto check

# Reset navigation if needed
cd your_username && git checkout _quarto.yml
cd quarto_code/scripts && python3 master_update.py
```

### "Watch mode not working"

**Problem:** Real-time updates aren't happening

**Solution:**
```bash
# Stop watch mode (Ctrl+C)
# Check your file system and try again
python3 smart_auto_generator.py --watch --verbose
```

## ‚úÖ Success Checklist

After setup, you should have:

- [ ] **Navigation works** - your chapters appear in the navbar
- [ ] **Indexes exist** - each directory has a `00_index.qmd` with navigation
- [ ] **Site renders** - `quarto render` completes without errors
- [ ] **Structure validates** - `python3 master_update.py --validation-only` passes
- [ ] **Backups created** - `.navigation_backups/` directory exists

## üîÑ What's Next?

### For Content Creation
- **Start writing** - create `.qmd` files in your chapters/sections
- **Use the preservation system** - add content between `<!-- USER-CONTENT-START -->` and `<!-- USER-CONTENT-END -->` markers
- **Run updates** - use `master_update.py` or watch mode

### For Advanced Usage
- **Explore themes** - check `quarto_code/styles/themes/`
- **Customize components** - see `quarto_code/components/`
- **Add automation** - extend the scripts in `quarto_code/scripts/`

### For Troubleshooting
- **Read the reference** - complete documentation in other sections
- **Use validation** - always run with `--validation-only` first
- **Check backups** - restore points are always available

---

**üéâ Congratulations!** You now have a fully automated educational website that maintains itself. Focus on creating great content - the system handles everything else! 