---
title: "A.2 How to Talk to AI: Your New Superpower"
toc: true
toc-depth: 2
format:
  html:
    css:
      - ../styles/main.css
      - ../styles/themes/evangelion.css
---

::: {.callout-objective title="Learning Goals"}
By the end of this lesson you will be able to:

1. Describe the **Role‚ÄìContext‚ÄìTask (R-C-T)** framework.
2. Craft clear AI prompts by filling in R-C-T.
3. Follow a 4-step workflow when you get stuck while coding or installing software.
4. Turn AI into a productive learning partner rather than a search engine.
:::

## 1  Your New Superpower

::: {.callout-note}
Think of an AI assistant as **Google Maps for problem solving**: you still decide the destination, but the AI shows possible routes and warns about traffic. Clear directions in ‚Üí good routes out.
:::

## 2  The R-C-T Recipe

## 2  Prompting Fundamentals üî∞

::: {.definition title="What *is* a prompt?"}
Think of a *prompt* as the opening line of a conversation with an expert helper.
The clearer you speak, the clearer (and faster) the help you receive.
:::

**Beginner-friendly checklist (run through this before you press *Enter*):**

1. Write in plain **English**‚Äîavoid slang or local abbreviations.
2. State **one goal per sentence**; break complex tasks into bullet lists.
3. Copy-paste **exact** error messages instead of paraphrasing them.
4. Supply only the **relevant** code snippet‚Äînot your whole file.
5. Use bold **[square-bracket placeholders]** for anything you still need to fill in.
6. End with a **clear deliverable**: *"Explain in 3 steps‚Ä¶"* or *"Give me pseudocode."*

---

## 3  The R-C-T Recipe

### Prompt Anatomy at a Glance

| Prompt Block | Ask Yourself‚Ä¶                         | Tiny Example Snippet |
|--------------|----------------------------------------|----------------------|
| **Role**     | *Who should the AI be?*               | `You are a calm tutor.` |
| **Context**  | *What does it need to know first?*    | `Here is my code ‚Ä¶`     |
| **Task**     | *What do I want back?*                | `Explain in 3 bullets.` |

---

### Prompt Quality Spectrum

::: {.panel-tabset}

#### Bad

```text
fix my list
```

#### Meh

```text
my python list is not working. help.
```

#### Good

```text
I have a Python list and `AttributeError: add` appears.
How do I add a new value?
```

#### Chef's-Kiss

```text
You are a friendly Python tutor.

Here is my code:

[insert code]

It raises `AttributeError: 'list' object has no attribute 'add'`.

Please:
1) Explain the error in simple terms.
2) Show the corrected code.
3) Give one tip to avoid this bug next time.
```

:::

---

### Prompt-Refinement Playbook

::: {.columns}
:::: {.column width="33%"}
**Draft 0**

```text
debug this
```
::::
:::: {.column width="33%"}
**Draft 1**

```text
List bug in Python. Code below.
```
::::
:::: {.column width="34%"}
**Draft 2** *(R-C-T complete)*

```text
You are a Python tutor.

Here is my code ‚Ä¶
Error: ‚Ä¶
Please: 1) explain 2) fix 3) prevent future errors.
```
::::
:::

## Prompting Flow at a Glance

Below is a quick visual of the *thinking loop* you should run whenever you need help from an AI assistant.

```{mermaid}
graph LR
  classDef node fill:#ffffff,stroke:#007acc,stroke-width:2px,color:#000,font-size:14px,font-weight:bold;
  classDef action fill:#000000,stroke:#000000,stroke-width:2px,color:#ffffff,font-size:12px,font-weight:bold;
  classDef decision fill:#f2f2f2,stroke:#000000,stroke-width:2px,color:#000,font-size:12px,font-weight:bold;

  S["Stuck or curious?"]:::node --> RCT["Plan with R-C-T"]:::action --> Ask["Send Prompt"]:::action --> AI["AI answer"]:::node --> Try["Test / Read"]:::action --> Dec{{Solved?}}:::decision
  Dec -->|Yes| Done["Move on üöÄ"]:::node
  Dec -->|No| Refine["Add context & refine"]:::action --> Ask

  linkStyle default stroke:#007acc,stroke-width:3px;
```

**How to read this:**
1. **Plan with R-C-T** ‚Äì Decide the Role, give the Context, and state the Task.
2. **Send Prompt ‚Üí AI answer** ‚Äì Let the model work; skim for an overview, then read in depth.
3. **Test / Read** ‚Äì Run the suggestion or apply the explanation.
4. **Solved?** ‚Äì If yes, celebrate. If not, *add missing info* or *clarify your goal* and loop back.

---

## 4  Scenario 1 ‚Äì Debugging a Python Error {#debugging}

::: {.callout-note title="The Situation"}
You typed some code, pressed Run, and saw *`AttributeError: 'list' object has no attribute 'add'`*.
:::

```python
# buggy code
game_scores = [42, 78, 95]
game_scores.add(150)  # ‚Üê AttributeError here
```

::: {.prompt title="Copy-Paste Prompt"}
Replace the placeholders **[like this]** before sending.
:::

```text
You are a friendly Python tutor for absolute beginners.

I want to add the number 150 to my list `game_scores`.
Here is my code:

[insert your code]

When I run it I get:
`AttributeError: 'list' object has no attribute 'add'`.

Please:
1. Explain the error in simple terms.
2. Show the corrected code.
3. Explain why the correction works.
```

::: {.exercise}
1. Copy the prompt above.
2. Paste it into Gemini, Claude, or ChatGPT.
3. Try the fixed code in your editor.
:::

---

## 5  Scenario 2 ‚Äì Understanding Mysterious Code {#understand-code}

::: {.callout-note title="The Situation"}
You found a snippet on the internet, but every line is a mystery.
:::

```python
def mystery(nums):
    return [n**2 for n in nums if n % 2 == 0]
```

::: {.prompt title="Copy-Paste Prompt"}
Ask the AI to be your explainer.
:::

```text
You are a patient coding instructor.

Explain this Python code line-by-line **as if I were brand new to programming**:

[insert the code]

Focus on what each part does and why it's needed.
```

::: {.exercise}
Run the prompt, then rewrite the code using full `for`-loops to confirm you understand it.
:::

---

## 6  Scenario 3 ‚Äì Planning a Mini Project {#planning}

::: {.callout-note title="The Situation"}
You want to build a simple tip-calculator app but don't know where to start.
:::

::: {.prompt title="Copy-Paste Prompt"}
Use the R-C-T framework to generate a learning roadmap.
:::

```text
You are a senior software coach.

I am a beginner who wants to build a **tip calculator** in Python that asks for the bill and tip % and prints the total.

Break this project into **5‚Äì7 beginner-friendly steps**. For each step, describe what I should learn and produce.
```

::: {.exercise}
After receiving the roadmap, tackle *Step 1*, then return to the AI for *Step 2*.
:::

---

## 7  Scenario 4 ‚Äì Troubleshooting an Installation {#install-error}

::: {.callout-note title="The Situation"}
You installed Python but your terminal says *`command not found: python3`*.
:::

::: {.prompt title="Copy-Paste Prompt"}
Be sure to fill in your operating system.
:::

```text
You are an expert troubleshooter for macOS/Windows/Linux.

On **[your OS]** I installed Python using the official installer.
When I open a new terminal and type `python3` I get:

`command not found: python3`

Give me a **step-by-step plan** to fix this. Explain every command and the expected output.
```

::: {.exercise}
Follow the AI's plan. If a step fails, copy the exact error back into the chat and ask, *"Why didn't Step X work?"*
:::

---

## 8  The 4-Step "I'm Stuck" Workflow {#workflow}

| Step | Emoji | What to Do | Mini Prompt |
|------|:----:|------------|-------------|
| 1    | üìù   | **Plan** ‚Äì Ask the AI to break your goal into steps. | `Break my goal into 5 beginner steps.` |
| 2    | üíª   | **Build** ‚Äì Implement *one* step at a time. | ‚Äî |
| 3    | üîß   | **Debug** ‚Äì Provide goal, code, **exact** error. | `My goal is ‚Ä¶ Here is code ‚Ä¶ Error ‚Ä¶ What's wrong?` |
| 4    | üßë‚Äçü§ù‚Äçüßë | **Ask a Human** ‚Äì Still stuck? Share the chat. | ‚Äî |

---

## 9  Prompting Cheat Sheet üìé

::: {.callout-tip title="Copy-and-Go Templates"}

| Goal | Mini-Prompt Template |
|------|---------------------|
| Debug code | `Here is my code ‚Ä¶ Error ‚Ä¶ Please explain and fix.` |
| Learn a concept | `Explain [concept] like I'm 12; give 1 analogy & example.` |
| Refactor | `Rewrite this function for readability; keep results identical.` |
| Add comments | `Add beginner-friendly comments to this code.` |
| Generate tests | `Write 3 pytest cases for this function.` |
| Translate lang | `Convert this JS snippet to Python.` |
:::

---


## 11. General Video for prompting (Must See)
{{< video https://youtu.be/bIxbpIwYTXI width="560" height="315" >}}

## 12  Key Takeaways

::: {.callout-tip title="Key Takeaways"}
‚Ä¢ R-C-T ‚Üí Clear prompts ‚Üí Helpful answers.

‚Ä¢ Always show **exact** error messages‚Äînever paraphrase them.

‚Ä¢ When the answer isn't right, **clarify the Task** or add more Context.
:::

[Back to Appendix](00_index.qmd)

*Need this page offline?* [Download as PDF](02_how_to_get_help.qmd?format=pdf)

{{< include _nav.qmd >}}
