# Hugo Configuration Template - Self-Contained
# This file is processed by generate_hugo_config.py
# Variables are filled from course.yml and config.yml ONLY
# NO dependency on root dna.yml for rendering

baseURL = "{{ site.baseurl | default('') }}"
languageCode = "en-us"
title = "{{ site.title | default('Class Template') }}"

# Content and build settings - NEW: Output to root-level hugo_generated/public
publishDir = "{{ hugo.output_dir | default('../hugo_generated/public') }}"
buildDrafts = {{ build.include_draft_content | default('false') | toml_bool }}
buildFuture = false

# Output formats - enable JSON for search index
[outputs]
home = ["HTML", "JSON"]

[outputFormats.JSON]
mediaType = "application/json"
baseName = "search-index"
isPlainText = true

# Module configuration for content mounts and framework assets
[module]
{% for source in hugo.content_sources | default(['class_notes', 'modules']) %}
  [[module.mounts]]
    source = "{{ source }}"
    target = "content/{{ source }}"
{% endfor %}
  # Framework wiki content mounts - NEW: Mount from root-level framework_wiki/
  [[module.mounts]]
    source = "../framework_wiki/framework_tutorials"
    target = "content/framework_tutorials"
  
  [[module.mounts]]
    source = "../framework_wiki/framework_documentation"
    target = "content/framework_documentation"
  # Homepage mount
  [[module.mounts]]
    source = "{{ hugo.homepage_source | default('home.md') }}"
    target = "content/_index.md"
  
  # Framework auth pages mount - NEW: Use relative path to root-level framework
  [[module.mounts]]
    source = "../framework/auth"
    target = "content/auth"
  
  # Framework protected pages mounts - NEW: Use relative path to root-level framework
  [[module.mounts]]
    source = "../framework/protected_pages/dashboard"
    target = "content/dashboard"
  
  [[module.mounts]]
    source = "../framework/protected_pages/enroll"
    target = "content/enroll"
  
  [[module.mounts]]
    source = "../framework/protected_pages/upload"
    target = "content/upload"
  
  [[module.mounts]]
    source = "../framework/protected_pages/grading"
    target = "content/grading"
  
  [[module.mounts]]
    source = "../framework/protected_pages/my-grades"
    target = "content/my-grades"
  
  [[module.mounts]]
    source = "../framework/protected_pages/grading-sync"
    target = "content/grading-sync"
  
  [[module.mounts]]
    source = "../framework/protected_pages/student-dashboard"
    target = "content/student-dashboard"
  
  # Framework assets mounts - NEW: Use relative path to root-level framework
  [[module.mounts]]
    source = "{{ hugo.assets_path | default('../framework/assets') }}"
    target = "assets"
  
  # Static assets (images, etc.) served directly
  [[module.mounts]]
    source = "{{ hugo.assets_path | default('../framework/assets') }}"
    target = "static/assets"
  
  # Notebook files for JupyterLite
  [[module.mounts]]
    source = "../framework/assets/notebooks"
    target = "static/notebooks"
  
  # Generated static files (framework-config.js, etc.)
  [[module.mounts]]
    source = "../hugo_generated/static"
    target = "static"
  
  # Generated data files (JSON for sync interface)
  [[module.mounts]]
    source = "../hugo_generated/data"
    target = "static/data"
  
  [[module.mounts]]
    source = "../framework/css"
    target = "assets/css"
  
  [[module.mounts]]
    source = "../framework/css/components"
    target = "assets/components"
  
  # Theme assets mount - NEW: Use relative path to root-level framework
  [[module.mounts]]
    source = "{{ theme.path | default('../framework/themes') }}/{{ theme.name | default('evangelion') }}/css"
    target = "assets/theme"
  
  # Theme components mount - preserve directory structure  
  [[module.mounts]]
    source = "{{ theme.path | default('../framework/themes') }}/{{ theme.name | default('evangelion') }}/css/components"
    target = "assets/theme/components"
  
  # Framework layouts mount - PRIORITY (loaded first) - NEW: Use relative path to root-level framework
  [[module.mounts]]
    source = "../framework/layouts"
    target = "layouts"
  
  # Theme layouts mount - OVERRIDES (loaded second, can override framework)
  [[module.mounts]]
    source = "{{ theme.path | default('../framework/themes') }}/{{ theme.name | default('evangelion') }}/layouts"
    target = "layouts"

# Markup configuration
[markup]
  [markup.goldmark]
    [markup.goldmark.renderer]
      unsafe = true
    [markup.goldmark.extensions]
      [markup.goldmark.extensions.passthrough]
        enable = true
        [markup.goldmark.extensions.passthrough.delimiters]
          inline = [['$', '$'], ['\\(', '\\)']]
          block = [['$$', '$$'], ['\\[', '\\]']]
  [markup.highlight]
    style = "{{ appearance.code_highlighting | default('github') }}"
    lineNos = true
    anchorLineNos = false
    lineNumbersInTable = true

# Site parameters from course.yml and config.yml
[params]
  course_name = "{{ course_name }}"
  course_code = "{{ course_code }}"
  semester = "{{ semester }}"
  professor_name = "{{ professor.name }}"
  professor_email = "{{ professor.email }}"
  contact_policy = "{{ contact_policy }}"
  
  # Profile settings from config.yml
  profile_image = "{{ profile.image | default('/assets/images/profile-placeholder.svg') }}"
  
  # Accessibility settings from config.yml
  default_font = "{{ accessibility.default_font | default('normal') }}"
  high_contrast = {{ accessibility.high_contrast | default('false') | toml_bool }}
  
  # Navigation settings
  sidebar_style = "{{ navigation.sidebar_style | default('tree') }}"
  show_breadcrumbs = {{ navigation.show_breadcrumbs | default('true') | toml_bool }}
  
  # Theme colors from course.yml branding
  primary_color = "{{ branding.primary_color | default('#2E3440') }}"
  accent_color = "{{ branding.accent_color | default('#88C0D0') }}"
  
  # Content display settings
  show_difficulty_badges = {{ content.show_difficulty_badges | default('true') | toml_bool }}
  show_estimated_time = {{ content.show_estimated_time | default('true') | toml_bool }}
  homework_highlight = {{ content.homework_highlight | default('true') | toml_bool }}
  
  # Discussion system settings
  [params.discussions]
  enabled = {{ discussions.enabled | default('false') | toml_bool }}
  provider = "{{ discussions.provider | default('giscus') }}"
  repository = "{{ discussions.repository }}"
  repository_id = "{{ discussions.repository_id }}"
  category = "{{ discussions.category }}"
  category_id = "{{ discussions.category_id }}"
  theme = "{{ discussions.theme | default('purple_dark') }}"
  input_position = "{{ discussions.input_position | default('top') }}"
  reactions_enabled = {{ discussions.reactions_enabled | default('true') | toml_bool }}
  emit_metadata = {{ discussions.emit_metadata | default('true') | toml_bool }}
  loading = "{{ discussions.loading | default('lazy') }}"
  auto_enable_for_types = {{ discussions.auto_enable_for_types | default(['tutorial', 'note', 'homework', 'project', 'documentation']) | tojson }}
  exclude_types = {{ discussions.exclude_types | default(['master-index', 'reference']) | tojson }}
  slug_in_url = {{ discussions.slug_in_url | default('true') | toml_bool }}

  # Authentication system settings
  [params.authentication]
  enabled = {{ authentication.enabled | default('false') | toml_bool }}
  provider = "{{ authentication.provider | default('none') }}"
  supabase_url = "{{ authentication.supabase.url | default('') }}"
  supabase_anon_key = "{{ authentication.supabase.anon_key | default('') }}"
  login_redirect = "{{ authentication.flows.login_redirect | default('/auth/callback/') }}"
  logout_redirect = "{{ authentication.flows.logout_redirect | default('/') }}"
  protected_redirect = "{{ authentication.flows.protected_redirect | default('/dashboard/') }}"
  show_in_sidebar = {{ authentication.ui.show_in_sidebar | default('true') | toml_bool }}
  login_icon = "{{ authentication.ui.login_icon | default('üîê') }}"
  logout_icon = "{{ authentication.ui.logout_icon | default('üö™') }}"

# Menu configuration (auto-generated from content structure)
[menu]
  [[menu.main]]
    name = "Home"
    url = "/"
    weight = 10
{% for source in hugo.content_sources | default(['class_notes', 'modules', 'framework_tutorials', 'framework_documentation']) %}
  [[menu.main]]
    name = "{{ source.replace('_', ' ').title() }}"
    url = "/{{ source }}/{% if source == 'modules' %}00_index{% else %}00_master_index{% endif %}/"
    weight = {{ loop.index + 1 }}0
{% endfor %} 