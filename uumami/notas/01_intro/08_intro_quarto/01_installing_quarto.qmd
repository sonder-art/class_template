---
title: "Installing and Testing Quarto"
format:
  html:
    css:
      - ../../../../quarto_code/styles/main.css
      - ../../../../quarto_code/styles/themes/evangelion.css
---

::: {.objective}
### Your Goals for This Section
- **Understand what Quarto is** and its role as our publishing tool.
- **Install the Quarto command-line tool**.
- **Run a final "smoke test"** to ensure your entire local environment is working together perfectly.
:::

## The Final Piece: What is Quarto?

::: {.definition title="What is Quarto? (Your Personal Publishing House)"}
**Quarto** is a tool that takes simple text files containing your notes and code and turns them into beautiful, professional documents.

Think of it as your personal publishing house. You provide the manuscript (a simple `.qmd` file with text and Python code), and the Quarto engine formats it, runs the code, includes the output (like charts and tables), and produces a polished final product.

With Quarto, you can turn a single source file into dozens of formats, including:
- A complete, interactive website (like the one you're reading!)
- A PDF for a formal report
- A PowerPoint-style presentation
- An e-book
:::

It's the tool that brings all our workâ€”text, code, and resultsâ€”together.

## A Modern Approach: Using AI as Your Quarto Co-Pilot

Quarto is a powerful tool, and its commands often depend on which folder you are in. This is a perfect time to level up your AI prompting skills by learning to provide **clear context about your project structure**.

```{mermaid}
graph TD
    classDef node fill:#ffffff,stroke:#007acc,stroke-width:2px,color:#000,font-size:14px,font-weight:bold;
    classDef action fill:#000000,stroke:#000000,stroke-width:2px,color:#ffffff,font-size:12px,font-weight:bold;
    classDef decision fill:#f2f2f2,stroke:#000000,stroke-width:2px,color:#000,font-size:12px,font-weight:bold;
    classDef doc fill:#e8f5e9,stroke:#4caf50,stroke-width:2px,color:#000;

    subgraph "Phase 1: Understand the Tool"
        P1A["Prompt AI to explain<br/>what Quarto is"]:::action --> P1B["Read the explanation"]:::node
    end

    subgraph "Phase 2: Generate a Detailed Plan"
        P2A["Prompt AI for a full<br/>Quarto setup & test guide"]:::action --> P2B["Get AI's Answer"]:::node --> P2C{{Compare AI steps<br/>to this guide}}:::decision
        P2C -->|They Match!| P2D["Proceed with confidence"]:::action
        P2C -->|They Don't Match| P2E["Trust this guide's steps<br/>(your safety net)"]:::doc
    end

    subgraph "Phase 3: Execute with Directory Awareness"
        P3A["Follow steps, using<br/>pwd and ls to verify<br/>your location"]:::action --> P3B{{`quarto preview` fails?}}:::decision
        P3B -->|No| P3D["You're all set! ðŸŽ‰"]:::node
        P3B -->|Yes| P3C["Use debugging prompt:<br/>Provide goal, location, command, & error"]:::action --> P3A
    end

    P1B --> P2A
    P2D --> P3A
    P2E --> P3A

    linkStyle default stroke:#007acc,stroke-width:3px;
```

### Phase 1: Understand the "Why"

Before you install, ask the AI to explain what this tool even does.

::: {.prompt title="Conceptual Understanding Prompt"}
"I'm a beginner. Can you explain what the tool 'Quarto' is used for? Use an analogy like a 'publishing house' to help me understand its role."
:::

### Phase 2: Get a Detailed Plan

Now, ask for a complete plan. This time, notice we have to be very specific about our project's file structure so the AI can give us the correct commands for the correct folders.

::: {.prompt title="Detailed Planning Prompt"}
You are an expert technical assistant who provides extremely clear, step-by-step instructions for beginners on **[Your Operating System]**.

My goal is to run a "smoke test" on a Quarto project I have cloned. I need a plan that covers:
1.  How to install the Quarto command-line tool.
2.  How to open the project in my code editor, Cursor.
3.  The project has a specific folder structure. The Python libraries I need are listed in a file at this path: `students/_template/requirements.txt`. How do I install them correctly?
4.  The main project I want to preview is located inside the `students/_template` directory. What is the exact command to preview this specific part of the project?

Please be very clear about which directory I need to be in for every terminal command.
:::

### Phase 3: Execute and Debug

With your AI-generated plan in hand, you're ready to execute. The most common failure point for Quarto is being in the wrong directory.

::: {.prompt title="Debugging a Quarto Error"}
I am trying to run `quarto preview` and it's not working.

**My Goal:** To preview the website in the `students/_template` folder.

**My Current Directory:** I ran the `pwd` command and it shows `[paste the output of pwd here]`.

**The command I ran was:**
`quarto preview`

**The error I got was:**
`[The exact error message you saw]`

Can you tell me what's wrong and how to fix it?
:::

This detailed debugging prompt gives the AI all the clues it needs to solve your problem effectively.

## Step 1: Install Quarto

Choose the tab for your operating system. Using a package manager is recommended.

::: {.panel-tabset}

### macOS (Homebrew)

```bash
brew install quarto
```

### Windows (Winget)
Open **PowerShell** as an administrator and run:

```bash
winget install Quarto.Quarto
```

### Linux (Installer)
We recommend the official installer for Linux.
1.  Go to the [Official Quarto Downloads Page](https://quarto.org/docs/get-started/) and download the `.deb` file for Debian/Ubuntu.
2.  In your terminal, navigate to your `Downloads` folder and run the installation command (your version number may be different):

    ```bash
    cd ~/Downloads
    sudo dpkg -i quarto-*-linux-amd64.deb
    ```
:::

To verify it's installed, open a **new** terminal and run `quarto --version`. You should see a version number.

## Step 2: The Smoke Test - Verifying Your Full Setup

This final test is often called a "smoke test" in software developmentâ€”a quick check to see if there's any smoke before you dive deeper. It confirms that all your tools (Cursor, Git, Python, and Quarto) are working together perfectly. We will render the template project you cloned to make sure everything is configured correctly.

### 1. Open the Project in Cursor
First, we need to open the main project folder in your code editor.
- Open your terminal (Ubuntu/WSL, or Terminal on Mac).
- Navigate to the project folder you cloned in the last step. For example, if you created a `my-class-code` folder inside your `Documents`: 

```bash
cd ~/Documents/my-class-code/class-template
```
- Use `pwd` to confirm you are in the main project folder. Once confirmed, open it in Cursor:

    ```bash
    cursor .
    ```
- The Cursor application will launch with all the project files in the File Explorer on the left.

### 2. Install Python Dependencies
Your project needs certain Python libraries to run the code embedded in the documents. The `requirements.txt` file lists them.

- Inside Cursor, open the built-in terminal panel (`Ctrl+` `).
- Make sure you are in the **main project root directory** (run `pwd` to check).
- Run the following command to install everything listed in the requirements file for the student template.

    ```bash
    python3 -m pip install -r students/_template/requirements.txt
    ```

### 3. Preview the Project Website
This is the universal workflow you will use for **all** Quarto projects.

- In the Cursor terminal, you must first **navigate into the specific sub-folder** you want to preview.

    ```bash
    cd students/_template
    ```
- Use `pwd` to confirm you are now inside the `students/_template` directory.
- Run the universal preview command:

    ```bash
    quarto preview
    ```
- A local web server will start. In your terminal, you will see a line that says `Listening on http://localhost:....`. **Hold `Ctrl` (or `Cmd` on Mac) and click that link.**
- A new tab should open in your web browser showing a live preview of the student template website.

::: {.definition title="What is `localhost`?"}
`localhost` is a special network name that always means "this computer." When your browser visits a `localhost` URL, it's not fetching a website from the internet. It is talking directly to the temporary web server that Quarto is running on your machine. This lets you see a perfect preview of your site without having to upload it anywhere first.
:::

To stop the preview server, go back to the terminal where it's running and press `Ctrl+C`.

## ðŸŽ‰ Congratulations! ðŸŽ‰

If you can successfully preview the project website, you have mastered the fundamental Quarto workflow and **your environment is perfectly configured!** You have a professional-grade setup for the entire course and for any future projects you can dream of.

