---
title: "Setting up Git and GitHub"
format:
  html:
    css:
      - ../../../quarto_code/styles/main.css
      - ../../../quarto_code/styles/themes/evangelion.css
---

::: {.objective}
### Your Goals for This Section
- **Understand the difference** between Git and GitHub.
- **Create a GitHub account** to act as your online portfolio.
- **Install Git** on your computer to act as your local time machine.
- **Securely connect** your computer to GitHub using an SSH key.
:::

## Your Professional Portfolio and Time Machine

This step is critical for managing your work like a professional. We will set up two different but related tools: **Git** and **GitHub**.

::: {.definition title="What is Git? (Your Local Time Machine)"}
Imagine you're writing an important essay. You save it, delete a paragraph, and an hour later realize you need it back. If you only have one file, you're out of luck.

**Git** is a "version control system" that solves this. It's like a "save" button on steroids. Instead of overwriting your work, Git takes a "snapshot" of your entire project every time you tell it to. These snapshots are called **commits**.

This lets you keep a complete history of every change and rewind your entire project back to any previous snapshot if you make a mistake. It's a time machine that runs on your computer.
:::

::: {.definition title="What is GitHub? (Your Cloud Drive & Portfolio)"}
If Git is your local time machine, **GitHub** is the cloud service where you store your projects and their histories. It's a website that is:

-   **A cloud backup:** It keeps a safe copy of your work off your computer.
-   **A professional portfolio:** Your GitHub profile becomes a public showcase of your projects that you can show to potential employers.
-   **A collaboration hub:** It's where developers share code and work together.
:::

We will create a free GitHub account, install Git, and then connect the two.

## Git & GitHub Setup Flow at a Glance

```{mermaid}
graph LR
  classDef node fill:#ffffff,stroke:#007acc,stroke-width:2px,color:#000,font-size:14px,font-weight:bold;
  classDef action fill:#000000,stroke:#000000,stroke-width:2px,color:#ffffff,font-size:12px,font-weight:bold;
  classDef decision fill:#f2f2f2,stroke:#000000,stroke-width:2px,color:#000,font-size:12px,font-weight:bold;

  GH["Create GitHub account"]:::action --> GitInstall["Install Git on computer"]:::action --> Config["git config name & email"]:::action --> Key["Generate SSH key"]:::action --> AddKey["Add key to GitHub"]:::action --> Test["Test connection"]:::action --> Ok{{Success?}}:::decision
  Ok -->|Yes| Ready["Git & GitHub ready ðŸŽ‰"]:::node
  Ok -->|No| Help["Run AI troubleshooting prompt"]:::action

  linkStyle default stroke:#007acc,stroke-width:3px;
```

Refer back to this map any time you wonder *where* you are in the onboarding process.

## A Modern Approach: Using AI as Your Setup Co-Pilot

Setting up Git and GitHub is a multi-step process and a perfect time to practice using your AI assistant as a co-pilot. We'll use a three-phase approach: first, we'll ask the AI to help us understand the concepts, then we'll have it generate a plan, and finally, we'll execute that plan, using this guide as our source of truth.

```{mermaid}
graph TD
    classDef node fill:#ffffff,stroke:#007acc,stroke-width:2px,color:#000,font-size:14px,font-weight:bold;
    classDef action fill:#000000,stroke:#000000,stroke-width:2px,color:#ffffff,font-size:12px,font-weight:bold;
    classDef decision fill:#f2f2f2,stroke:#000000,stroke-width:2px,color:#000,font-size:12px,font-weight:bold;
    classDef doc fill:#e8f5e9,stroke:#4caf50,stroke-width:2px,color:#000;

    subgraph "Phase 1: Understand the Concepts"
        P1A["Prompt AI to explain<br/>Git vs. GitHub"]:::action --> P1B["Read the explanation"]:::node
    end

    subgraph "Phase 2: Build Your Plan Iteratively"
        P2A["Start with a broad<br/>'How-to' prompt"]:::action --> P2B["Learn key terms<br/>(e.g., 'SSH') from the answer"]:::node --> P2C["Form a 'perfect' prompt<br/>with all key steps"]:::action --> P2D["Get final AI plan"]:::node --> P2E{{Compare AI plan<br/>to this guide}}:::decision
        P2E -->|They Match!| P2F["Proceed with confidence"]:::action
        P2E -->|They Don't Match| P2G["Trust this guide's steps<br/>(your safety net)"]:::doc
    end

    subgraph "Phase 3: Execute and Debug"
        P3A["Install, Configure,<br/>Create SSH Key, Test"]:::action --> P3B{{Something fails?}}:::decision
        P3B -->|No| P3D["You're all set! ðŸŽ‰"]:::node
        P3B -->|Yes| P3C["Use debugging prompt:<br/>Provide goal, command, & EXACT error"]:::action --> P3A
    end

    P1B --> P2A
    P2F --> P3A
    P2G --> P3A

    linkStyle default stroke:#007acc,stroke-width:3px;
```

### Phase 1: Understand the Concepts

Before installing anything, let's make sure we understand what these tools are.

::: {.prompt title="Prompt for Conceptual Understanding"}
You are a patient code tutor. Explain the difference between Git and GitHub to a complete beginner. Use a simple analogy for each one, like a time machine or a cloud portfolio.
:::

### Phase 2: Building Your Technical Plan (From Novice to Pro-Prompter)

It's unrealistic to know all the right technical terms when you're starting. A great developer learns to have a *conversation* with their AI. You start with a broad question, learn from the answer, and ask more specific follow-up questions. Let's walk through how that looks.

**Step 2.1: The First, Broad Question**
You don't know what you don't know, so start simple.

::: {.prompt title="Initial Prompt"}
"I am on **[Your Operating System]**. What are the main steps I need to follow to set up Git and start using it with my GitHub account?"
:::
An AI might give you a good high-level answer, mentioning steps like 'Install Git', 'Configure Git', and 'Authenticate with GitHub'.

**Step 2.2: The Follow-Up Question**
That last step, 'Authenticate', sounds important but vague. Let's zoom in on that. This is the key to a productive AI conversation: identify what you don't understand and ask for clarification.

::: {.prompt title="Follow-up Prompt"}
"You mentioned I need to 'Authenticate with GitHub'. I'm a beginner, so could you explain what that means? What is the most secure and modern way for a developer to do this?"
:::
This follow-up is powerful. The AI will now likely explain the difference between using HTTPS (passwords or tokens) and **SSH keys**. It will almost certainly recommend SSH as the professional standard. You just learned a critical concept and the correct terminology (`SSH key`) without knowing it beforehand.

**Step 2.3: Assembling the 'Perfect' Prompt**
Now that your conversation with the AI has armed you with the right vocabulary (`install`, `configure`, `ed25519 SSH key`, `test connection`), you can ask for exactly what you need in a single, comprehensive prompt. This tells the AI you know what a good solution looks like.

::: {.prompt title="The Final, Detailed Prompt"}
You are an expert technical assistant who gives clear, step-by-step instructions for beginners. I am on **[Your Operating System]**.

Please give me a full guide to set up Git and connect it to GitHub. The guide must include:
1.  How to install Git using a package manager if possible.
2.  How to configure my `user.name` and `user.email`.
3.  How to generate a new `ed25519` SSH key.
4.  How to add the public SSH key to my GitHub account.
5.  How to test the SSH connection.

For every step, explain what it does and why it's needed.
:::

### Phase 3: Execute and Debug

With the AI's response in hand, you can now proceed with the installation.

1.  **Verify First:** Compare the AI's suggested steps with the steps outlined below in this guide. If they differ significantly, **trust this guide**.
2.  **Execute Step-by-Step:** Follow the instructions to install, configure, and connect.
3.  **Debug If Needed:** If you encounter an error on any step, use the debugging prompt pattern.

    ::: {.prompt title="Follow-up Prompt: Debugging an Error"}
    I'm following a guide to set up Git and GitHub, but Step [Number] failed.

    **My Goal:** [e.g., "I was trying to test my SSH connection"]

    **The command I ran was:**
    `[The exact command you typed]`

    **The error message I received was:**
    `[The exact error message you saw]`

    Can you explain what this error means and how to fix it?
    :::

## Step 1: Create a GitHub Account

1.  Go to [https://github.com/](https://github.com/) and sign up for a free account.
2.  Choose a name you like, is important that you like it and represents you.
3.  **Use the same email address** you used for the other services in this course.

## Step 2: Install Git on Your Computer

Click the tab for your operating system.

::: {.panel-tabset}

### Windows (WSL) & Linux

Git is almost always pre-installed. If not, the command is simple. In your Ubuntu/Linux terminal, run:

```bash
sudo apt update && sudo apt install git -y
```

### macOS (Homebrew)

As with other tools, we'll use Homebrew. In your Terminal, run:

```bash
brew install git
```

### Windows (Direct)

1.  Go to the official Git download page: [https://git-scm.com/download/win](https://git-scm.com/download/win)
2.  Download and run the installer. You will see many screens with options. For all of them, **the default settings are fine.** Just click "Next" through the entire process.

:::

## Step 3: Tell Git Who You Are

Now we need to configure Git with your name and email. This info gets attached to every "snapshot" (commit) you make.

Open your terminal and run these two commands, **replacing the placeholder text with your own information.**

```bash
git config --global user.name "[Github User Name]"
```

```bash
git config --global user.email "[your-github-email@example.com]"
```

::: {.callout-tip}
Use the same email address that you used to sign up for your GitHub account.
:::

## Step 4: Connect to GitHub with a Secure Key (SSH)

How does your computer prove to GitHub that you are who you say you are? Instead of using a password every time, we'll set up a secure digital "key."

::: {.definition title="How SSH Keys Work (The Key & Lock Analogy)"}
Using SSH is like having a high-security key for your house (your GitHub account).

1.  You generate a **key pair** on your computer: a **private key** (like your physical house key, which you keep secret) and a **public key** (like a special, unique lock that only your key can open).
2.  You give the **public key (the lock)** to GitHub to install on your account's door.
3.  When you want to connect, your computer uses its **private key**. GitHub checks if it fits the public lock you gave it. If they match, the door opens securely.

This is much safer than using a password because you never send your secret key over the internet.
:::

### A. Generate Your Key Pair
1.  Open your terminal.
2.  Copy and paste the following command, **replacing the placeholder with your GitHub email.**

    ```bash
    ssh-keygen -t ed25519 -C "your_email@example.com"
    ```
3.  The command will ask where to save the file. The default location is correct. **Just press Enter.**
4.  It will then ask for a passphrase. This is an optional password for the key itself. For this course, it is safe to skip this. **Just press Enter twice** to leave it blank.

You'll see some text and a little picture, confirming your secure key has been created.

### B. Add Your Public Key (the "Lock") to GitHub
1.  First, view your public key by running this command:

    ```bash
    cat ~/.ssh/id_ed25519.pub
    ```
2.  The output will be a long string of text starting with `ssh-ed25519...`. **Highlight this entire block of text** and copy it to your clipboard.
3.  Go to [GitHub.com](https://github.com) and log in.
4.  Click your profile picture in the top-right corner, then select **"Settings"**.
5.  On the left-hand menu, click **"SSH and GPG keys"**.
6.  Click the green **"New SSH key"** button.
7.  In the **"Title"** box, give the key a name you'll recognize, like "My Laptop".
8.  In the large **"Key"** text box, paste the key you copied from your terminal.
9.  Click **"Add SSH key"**. You may have to enter your GitHub password to confirm.

### C. Test the Connection
Let's make sure the key and lock work. In your terminal, run:

```bash
ssh -T git@github.com
```
You might see a warning asking if you trust the connection. Type `yes` and press Enter. If it works, you will see a message like: `Hi [your-username]! You've successfully authenticated...`

## You're All Set!

Your time machine and cloud portfolio are set up and connected. The next step is to get your own copy of the class project to work on.

