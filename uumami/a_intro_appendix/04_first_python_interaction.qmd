---
title: "A.4 Your First Python Interaction"
format:
  html:
    css:
      - ../styles/main.css
      - ../styles/themes/evangelion.css
---

::: {.objective}
### Your Goal for This Section
- **Confirm your Python installation is working** by interacting with it directly.
- **Learn how to use Python's interactive mode** for simple tests and calculations.
- **Write and run your first line of Python code**.
:::

## What is a Programming Language?

At its heart, a programming language is a special vocabulary and set of grammar rules used to give instructions to a computer. You can't just tell a computer "figure out my company's sales," but you *can* write a set of precise commands in a language like Python to make it calculate them.

## Talking to Python: The Interactive Interpreter

Now that you have Python installed, it's time to have your first "conversation" with it. We will do this using its **interactive mode**, also known as the **interpreter** or **REPL** (Read-Eval-Print Loop).

Think of the interpreter as a direct line to Python. You give it one command at a time, and it responds immediately. This is perfect for testing small pieces of code, performing quick calculations, and exploring how the language works without the need to create a file.

## Step 1: Start the Interpreter

1.  Open your terminal (Terminal on macOS, Ubuntu/WSL on Windows).
2.  Type the following command and press `Enter`:

    ```bash
    python3
    ```

3.  The prompt in your terminal should change from the usual `$` or `>` to `>>>`. This means Python is listening and waiting for your commands.

## Step 2: Your First "Conversation" with Python

Let's try a few things. Type each line below after the `>>>` prompt and press `Enter`. Pay close attention to the output—every detail matters.

::: {.exercise title="Exercise 1: Python as a Calculator"}
At its simplest, Python can be a powerful calculator. Notice how it handles different types of numbers.

```python
# Addition
2 + 2
```
Python should immediately print the answer: `4`.

```python
# Subtraction
10 - 5
```
It prints `5`.

```python
# Multiplication
5 * 5
```
It prints `25`.

```python
# Division - notice the result!
100 / 5
```
Python prints `20.0`. The `.0` tells you that Python considers the result of division to be a "floating-point number" (a number with a decimal), even if the result is a whole number. This is an important detail!
:::

::: {.exercise title="Exercise 2: Printing and Functions"}
The `print()` **function** is one of the most-used commands in Python. A function is a named recipe that performs a specific action. The `print()` function's action is to display things on the screen.

```python
print("Hello, Python!")
```
Python will obey and print `Hello, Python!`.

-   `print` is the name of the function.
-   The parentheses `()` are used to call the function.
-   `"Hello, Python!"` is the **argument** we pass to the function—it's the information the function needs to do its job.
-   The quotes are important—they tell Python that this is a piece of text (what programmers call a **"string"**).
:::

::: {.exercise title="Exercise 3: Storing Information in a Variable"}
Variables are like labeled boxes where you can store information for later use. This is fundamental to programming. Let's create one.

```python
message = "My Python installation is working!"
```
Nothing seems to happen, but Python has stored your message in a variable named `message`. Now, let's see what's in the box by using the `print()` function again:

```python
print(message)
```
Python finds the `message` variable, reads its contents, and prints the message you stored: `My Python installation is working!`.
:::

::: {.exercise title="Exercise 4: Data Types Matter"}
Python treats different kinds of information differently. For example, a number is not the same as a piece of text that *looks* like a number.

Let's try adding two numbers:
```python
2 + 2 
```
As expected, you get `4`. Now, let's try adding two strings:
```python
"2" + "2"
```
The result is `"22"`! When you "add" strings, Python joins them together (this is called **concatenation**). This shows that the *type* of your data is critical.
:::

::: {.exercise title="Exercise 5: Creating Your First Error"}
Errors are not failures; they are Python's way of telling you it doesn't understand your instructions. Let's cause one on purpose.

```python
print(my_secret_message)
```

You will see a `NameError`.
```
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'my_secret_message' is not defined
```

This is a **NameError**, and the message is very helpful: Python is telling you that you asked it to print the contents of a variable named `my_secret_message`, but you never created such a variable. Getting comfortable reading error messages is a superpower for a programmer.
:::

::: {.exercise title="Exercise 6: Combining Text and Variables (f-strings)"}
A common task is to print a message that combines plain text with the value of a variable. The modern way to do this in Python is with an "f-string".

First, let's create a variable.
```python
name = "Ada Lovelace"
```
Now, create a new string but put the letter `f` right before the first quote. This tells Python it's an f-string. Inside the string, you can put variable names inside curly braces `{}`.

```python
print(f"Hello, my name is {name}.")
```
Python will replace `{name}` with the value stored in the `name` variable, printing: `Hello, my name is Ada Lovelace.`
:::

## Using AI to Write and Fix Code

Your AI assistant (like Cursor or ChatGPT) is an incredibly powerful pair programmer. Learning to ask it for help is just as important as learning to write code yourself. The key to getting good answers is to structure your request clearly using the **Role-Context-Task (R-C-T)** framework. Let's see it in action.

::: {.exercise title="Exercise 7: Asking an AI to Perform a Task"}
Let's say you want to do something more complex, like calculating the total cost of a shopping cart, including sales tax. Writing a good prompt is key.

**Here's a great prompt to give your AI assistant:**

::: {.prompt title="Prompt for AI Code Generation"}
"Using Python, can you write me a short script for the interactive terminal?

**My goal is:**
1.  Create a list of prices for a few items.
2.  Calculate the sum of those prices.
3.  Calculate a sales tax of 8.8%.
4.  Add the tax to the sum to get the final total.
5.  Print out the subtotal, the tax amount, and the final total in a clear, readable way."
:::

Let's break this prompt down using the R-C-T framework:
-   **Role:** While not explicitly stated, we're implying "You are a helpful Python programmer." A great prompt could make this explicit by starting with `You are a Python expert.`
-   **Context:** We've told it the language (`Python`), the environment (`interactive terminal`), and our high-level goal (a shopping cart script).
-   **Task:** The list of five numbered steps provides a crystal-clear, unambiguous task for the AI to complete.

The AI might give you something like this. Try pasting it into your `>>>` terminal prompt.

```python
# 1. Create a list of prices
item_prices = [10.00, 25.50, 5.25]

# 2. Calculate the sum
subtotal = sum(item_prices)

# 3. Calculate the tax
tax_rate = 0.088
tax_amount = subtotal * tax_rate

# 4. Calculate the final total
final_total = subtotal + tax_amount

# 5. Print the results
print(f"Subtotal: ${subtotal:.2f}")
print(f"Tax: ${tax_amount:.2f}")
print(f"Total: ${final_total:.2f}")
```
This demonstrates how a clear, step-by-step request helps the AI give you exactly what you need.
:::

::: {.exercise title="Exercise 8: Asking an AI to Fix an Error"}
Earlier, we saw a `NameError`. Another common one is a `TypeError`, which happens when you try to combine incompatible data types. Let's cause one.

```python
# This code is wrong!
items = 3
print("You have " + items + " items in your cart.")
```
Pasting this gives you a `TypeError` because you can't "add" a string to a number.

```
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can only concatenate str (not "int") to str
```

**Here's a great prompt for debugging:**

::: {.prompt title="Prompt for AI Debugging"}
"I'm a Python beginner and I got an error.

**My Goal:** I want to print the sentence: 'You have 3 items in your cart.'

**My Code:**
```python
items = 3
print("You have " + items + " items in your cart.")
```

**The Error:**
```
TypeError: can only concatenate str (not "int") to str
```
Can you please fix the code and explain in a simple way why it was wrong?"
:::

Let's analyze this prompt using R-C-T:
-   **Role:** The prompt could be improved by adding an explicit role like, `You are a friendly Python tutor.`
-   **Context:** This part is excellent. We provide our experience level ("I'm a Python beginner"), our **Goal**, our exact **Code**, and the exact **Error**. This is all the information the AI needs.
-   **Task:** The request is very specific: "fix the code" and "explain in a simple way."

An AI would correctly identify the issue and suggest using an f-string, which you learned about in Exercise 6!

```python
# Corrected code from AI
items = 3
print(f"You have {items} items in your cart.")
```

Providing the goal, the code, and the error message gives the AI all the context it needs to be a helpful tutor.
:::

## Step 3: Exit the Interpreter

When you're done, you can return to your normal terminal prompt.

1.  Type `exit()` and press `Enter`.
2.  The `>>>` prompt will disappear, and you'll be back to your familiar `$` or `>` prompt.

## Congratulations!

If you were able to complete these exercises, your Python installation is successful! You have confirmed that the core engine of your development environment is ready to go. You can now confidently proceed to the next step: setting up your code editor.

{{< include _nav.qmd >}} 