---
title: "A.3 Install Python, The Engine for Your Code"
format:
  html:
    css:
      - ../styles/main.css
      - ../styles/themes/evangelion.css
---

::: {.objective}
### Your Goals for This Section
- **Understand what Python is** and why we use it.
- **Install Python** on your computer.
- **Verify that the installation works** correctly.
:::

## Python Installation Flow at a Glance

Before diving into the details, here's a bird-eye view of the decision tree you will follow.

```{mermaid}
graph LR
  classDef node fill:#ffffff,stroke:#007acc,stroke-width:2px,color:#000,font-size:14px,font-weight:bold;
  classDef action fill:#000000,stroke:#000000,stroke-width:2px,color:#ffffff,font-size:12px,font-weight:bold;
  classDef decision fill:#f2f2f2,stroke:#000000,stroke-width:2px,color:#000,font-size:12px,font-weight:bold;

  Check["Run: python3 --version"]:::action --> Dec1{{3.8 or higher?}}:::decision
  Dec1 -->|Yes| Skip["Jump to Step 3 â€“ Verify"]:::node
  Dec1 -->|No| Install["Install Python (choose your OS tab)"]:::action --> Verify["Run verify commands"]:::action --> Dec2{{No errors?}}:::decision
  Dec2 -->|Yes| Done["Python ready ðŸŽ‰"]:::node
  Dec2 -->|No| Help["Use AI troubleshooting prompt"]:::action

  linkStyle default stroke:#007acc,stroke-width:3px;
```

**How to use this map:**
1. **Run the quick check.** If Python is modern enough, skip straight to the final verification.
2. **If not, install via the tab that matches your OS.**
3. **Verify.** If something still fails, jump to the troubleshooting prompt at the bottom of this page.

## What is Python?

::: {.definition title="What are Python and Pip?"}
- **Python** is the programming language we will use for almost everything in this course. Think of it as the **engine** for our car. It does all the actual work, like processing data, running calculations, and creating visualizations.

- **Pip** is Python's **Package Installer**. Think of it as the **mechanic** who installs new parts in our car's engine. When we need our car to do something new (like work with a specific type of data), we'll use `pip` to install a "package" that adds that new ability.
:::

In this guide, you will be using the **terminal**.

::: {.definition title="What is the Terminal?"}
The **terminal** (also called the **command line** or **shell**) is a text-based way to talk directly to your computer. Instead of clicking on icons, you type commands. It's fast, powerful, and a standard tool for all developers.

-   **Windows:** Open the **Ubuntu** (or other Linux) app you installed with WSL. This is your terminal.
-   **macOS:** Open the app named **"Terminal"**.
-   **Linux:** Open the app named **"Terminal"** or "Console".
:::

## Step 1: Check if Python is Already Installed

Many computers come with Python pre-installed. Let's check if you already have it. Type this command into your terminal and press `Enter`:

```bash
python3 --version
```

If you see a version number like `Python 3.8.10` or higher, you are in great shape! You can skip to **Step 3**. If you see an error or a version older than 3.8, continue to the next step.

## Step 2: How to Install Python

Click on the tab below that matches your computer's operating system.

::: {.panel-tabset}

### Windows (WSL2 - The Best Way)

This is the most reliable way to use Python on Windows for data science. It keeps your Python environment clean and separate from Windows.

1.  **Requirement:** This method uses the Windows Subsystem for Linux (WSL2). If you haven't installed it yet, please follow the [Official Microsoft WSL Installation Guide](https://learn.microsoft.com/en-us/windows/wsl/install) and choose **Ubuntu**.
2.  **Update Your Software List:** In your Ubuntu terminal, run this command to get the latest list of available software.

    ```bash
    sudo apt update
    ```

3.  **Install Python and Friends:** This command installs Python (`python3`), its package installer (`python3-pip`), and a tool for keeping projects separate (`python3-venv`). The `-y` at the end just says "yes" to any questions it might ask.

    ```bash
    sudo apt install python3 python3-pip python3-venv -y
    ```

### macOS (The Best Way)

The best way to manage software like Python on a Mac is with a tool called Homebrew.

1.  **Install Homebrew:** If you don't have it, open your Terminal app and paste the single command from the official [Homebrew website](https://brew.sh/). It will guide you through the installation.
2.  **Install Python:** Once Homebrew is installed, run this simple command:

    ```bash
    brew install python
    ```
    Homebrew handles all the tricky details for you.

### Linux (Ubuntu/Debian)

Most Linux systems have Python, but this ensures you have all the necessary helper packages.

1.  **Update Your Software List:**

    ```bash
    sudo apt update
    ```

2.  **Install Python and Friends:**

    ```bash
    sudo apt install python3 python3-pip python3-venv -y
    ```

### Windows (Direct - Not Recommended)

::: {.callout-warning title="Proceed with Caution"}
This method can be tricky. A system setting called `PATH` tells your computer where to find commands. If this isn't set right during installation, your computer won't be able to find `python` when you type it in the terminal. **We strongly recommend the WSL2 method instead.**
:::

1.  Go to the official [Python website's download page for Windows](https://www.python.org/downloads/windows/).
2.  Download the latest stable installer (e.g., "Windows installer (64-bit)").
3.  Run the installer. **This is the most important step:** On the very first screen of the installer, you MUST check the box at the bottom that says **"Add python.exe to PATH"**. If you miss this, you will have problems later.

:::

## Step 3: Verify Your Installation

Let's do a final check to make sure everything is working. Close your terminal, open a new one, and run these two commands one by one:

```bash
python3 --version
```

```bash
python3 -m pip --version
```

You should see version numbers for both `python3` and `pip`. If you do, congratulations! Your engine is installed and ready to go.

## Troubleshooting
If you type `python3 --version` and get an error, it means the terminal can't find the Python program. This is a very common problem! Here is a great prompt to use with your AI assistant to solve it.

::: {.prompt title="If You Get a 'command not found' Error"}

I am a beginner trying to install Python on `[Your Operating System]`.

I followed the installation steps, but when I open a new terminal and type `python3 --version`, I get a 'command not found' error.

Can you give me a step-by-step plan to figure out what's wrong? Please explain each step simply. I need to know how to check if Python is installed correctly and how to fix my computer's 'PATH' so the terminal can find it."
:::

{{< include _nav.qmd >}}