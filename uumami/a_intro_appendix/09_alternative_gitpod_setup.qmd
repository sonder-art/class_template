---
title: "A.9 Emergency Plan: Using Gitpod as a Fallback"
format:
  html:
    css:
      - ../styles/main.css
      - ../styles/themes/evangelion.css
---

::: {.objective}
### Your Goal for This Section
- **Understand what Gitpod is** and when to use it as a last resort.
- **Learn how to launch** the class project in a Gitpod cloud environment.
- **Connect your local Cursor editor** to the Gitpod environment for a better experience.
:::

::: {.callout-warning title="This is a Fallback, Not the Main Path"}
The primary goal of this course's setup phase is to build a professional development environment on your **local computer**. This is a core skill.

This guide provides an **emergency escape hatch** if you run into persistent, unresolvable issues with the local installation of Python, Git, or Quarto. Think of it as a temporary workaround to keep you from falling behind, not a long-term solution.
:::

## A Modern Approach: Using AI as Your Gitpod Co-Pilot

Even when using a fallback, your AI assistant can be a valuable guide. The workflow is the same: understand the concept, create a plan, and then execute it.

```{mermaid}
graph TD
    classDef node fill:#ffffff,stroke:#007acc,stroke-width:2px,color:#000,font-size:14px,font-weight:bold;
    classDef action fill:#000000,stroke:#000000,stroke-width:2px,color:#ffffff,font-size:12px,font-weight:bold;
    classDef decision fill:#f2f2f2,stroke:#000000,stroke-width:2px,color:#000,font-size:12px,font-weight:bold;
    classDef doc fill:#e8f5e9,stroke:#4caf50,stroke-width:2px,color:#000;

    subgraph "Phase 1: Understand the Tool"
        P1A["Prompt AI to explain<br/>what Gitpod is and why<br/>one would use it"]:::action --> P1B["Read the explanation"]:::node
    end

    subgraph "Phase 2: Generate and Verify Your Plan"
        P2A["Prompt AI for a full<br/>Gitpod launch guide"]:::action --> P2B["Get AI's Answer"]:::node --> P2C{{Compare AI steps<br/>to this guide}}:::decision
        P2C -->|They Match!| P2D["Proceed with confidence"]:::action
        P2C -->|They Don't Match| P2E["Trust this guide's steps<br/>(your safety net)"]:::doc
    end

    subgraph "Phase 3: Execute and Debug"
        P3A["Fork, Sign Up,<br/>and Launch Gitpod"]:::action --> P3B{{Something fails?}}:::decision
        P3B -->|No| P3D["You're all set! ðŸŽ‰"]:::node
        P3B -->|Yes| P3C["Use debugging prompt:<br/>Provide goal, step, & error"]:::action --> P3A
    end

    P1B --> P2A
    P2D --> P3A
    P2E --> P3A

    linkStyle default stroke:#007acc,stroke-width:3px;
```

### Phase 1: Understand the "Why"

Before you use a new tool, ask your AI assistant what it's for.

::: {.prompt title="Conceptual Understanding Prompt"}
"I'm a programming beginner. My instructor mentioned that if I can't get my local environment working, I can use a tool called **Gitpod** as a fallback. Can you explain what Gitpod is, and why it's a good emergency option?"
:::

### Phase 2: Get a Detailed Plan

Now, ask for a clear, step-by-step guide to launch your project.

::: {.prompt title="Detailed Planning Prompt"}
You are an expert technical assistant who writes clear guides for beginners.

I need a step-by-step plan to launch my forked GitHub repository in a Gitpod workspace. My forked repository is at: **[Paste the URL of YOUR fork here]**.

The plan should cover:
1.  How to sign up for Gitpod using my GitHub account.
2.  How to construct the special Gitpod URL to launch my specific repository.
3.  How to connect my local Cursor code editor to the running Gitpod workspace for the best experience.
:::

### Phase 3: Execute and Debug

With your AI-generated plan, you can now proceed.

1.  **Verify First:** Compare the AI's plan to the steps below. If they differ significantly, **trust this guide** for the course.
2.  **Execute:** Follow the steps to launch the workspace.
3.  **Debug If Needed:** If a step fails, provide the AI with your goal, the step you were on, and the exact error message to get a targeted solution.

## What is Gitpod?

Gitpod is a service that runs a complete, pre-configured development environment in the cloud. It gives you a "perfect" computer with Python, Git, and Quarto already installed and working, which you can access from anywhere.

There are two ways to use it:

1.  **In your browser:** Gitpod provides a VS Code-like editor in a browser tab. Good for quick access.
2.  **Connected to your local editor (Recommended Fallback):** You can connect your local Cursor editor to the powerful Gitpod cloud machine. This gives you the comfort of your desktop app powered by a perfect cloud environment.

## The Gitpod Workflow: Fork, Then Launch

The process is the same as the local setup: first, you make a personal copy of the class project on GitHub (a "fork"), and then you open that copy in Gitpod.

### Step 1: Fork the Class Repository (If You Haven't)

You must have your own copy of the project on your GitHub account. If you haven't done this yet, please follow **Step 1** in the [Fork & Clone guide](./07_forking_and_cloning.qmd) to create your fork.

### Step 2: Create a Gitpod Account

1.  Go to [https://www.gitpod.io/](https://www.gitpod.io/).
2.  Click "Login" and sign up using your **GitHub account**.

### Step 3: Launch Your Gitpod Workspace

1.  Go to the main page of **your forked repository** on GitHub.
2.  Copy the URL from your browser's address bar.
3.  Create the Gitpod launch URL by adding this prefix: `https://gitpod.io/#`

    Your final URL will look like: `https://gitpod.io/#https://github.com/your-username/repo-name`

4.  Paste this new URL into your browser and press Enter. Gitpod will build your workspace, which may take a few minutes.

## How to Use Your Gitpod Environment

Once your workspace is running, you have two options for interacting with it.

### Option A: The Browser Editor (Quick & Easy)

When your workspace loads, you'll see a code editor right in your browser. It has a file explorer, editor, and terminal, just like a desktop application. This is fine for making quick changes, but the experience can sometimes be slow.

### Option B: Connect from Your Local Cursor (Recommended Fallback)

This is the best way to use Gitpod as a fallback. You get the speed of your local editor with the power and perfection of the cloud environment.

1.  **Install the Gitpod Extension in Cursor:**
    -   Open your local Cursor application.
    -   Go to the Extensions view (the four squares icon).
    -   Search for `Gitpod` and install the official extension by "Gitpod".

2.  **Connect to Your Running Workspace:**
    -   In your browser, on the Gitpod workspace page, find the project name in the top menu bar.
    -   Click the main menu (hamburger icon) or your profile icon and look for an option like "Open in VS Code (Desktop)".
    -   This may prompt you to open a link with your local editor. Allow it.
    -   Your local Cursor application will open a new window that is now remotely connected to the Gitpod cloud computer. All file saving and terminal commands are now running in the cloud, but you are using the comfort of your local editor.

## Summary

Using Gitpod ensures you have a working environment no matter what. Once you are connected, all the subsequent steps in the guidesâ€”using the terminal, running `git`, and previewing with `quarto`â€”will work exactly the same, whether you are in the browser or connected via your local Cursor.

{{< include _nav.qmd >}}