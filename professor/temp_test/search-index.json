[{
  "title": "Configuration System",
  "url": "/class_template/framework_documentation/03_configuration_system/00_index/",
  "content": "Configuration System This index is automatically generated from the chapter content.\n📚 Chapter Content DNA.yml Specification Complete specification for dna.yml meta-process configuration file\n🟡 Medium | ⏱️ 10 min | 📋 Documentation\nConfiguration Merging Logic How generate_hugo_config.py merges course.yml and config.yml into hugo.toml\n🟡 Medium | ⏱️ 8 min | 📋 Documentation\n🧭 Navigation ↑ Back to Framework Documentation Next: Synchronization Engine →\nThis index was automatically generated. Do not edit manually.\n",
  "summary": "Index for Configuration System chapter",
  "date": "2025-08-03",
  "section": "framework_documentation",
  "type": "index",
  "chapter": "framework_documentation",
  "filename": "03_configuration_system",
  "path": "/class_template/framework_documentation/03_configuration_system/00_index/"
},{
  "title": "Framework Documentation",
  "url": "/class_template/framework_documentation/00_master_index/",
  "content": "Framework Documentation This master index is automatically generated from all chapter content.\n📖 Overview Technical documentation for framework internals. Useful for contributors and advanced users.\n📊 Content Statistics 3 chapters 5 content files 📚 Chapters Configuration System Chapter covering complete specification for dna.yml meta-process configuration file\n📊 2 content files\nContent:\nDNA.yml Specification 🟡 Configuration Merging Logic 🟡 Synchronization Engine Chapter covering how the sync system protects student work while enabling professor updates\n📊 1 content files\nContent:\nSync Philosophy and Design 🔴 📎 Appendices Tests Chapter covering testing mathematical formula rendering with katex\n📊 2 content files\nContent:\nLaTeX Math Rendering Test JupyterLite Integration Test 🟡 This master index was automatically generated. Do not edit manually.\n",
  "summary": "Master index for Framework Documentation content",
  "date": "2025-08-03",
  "section": "framework_documentation",
  "type": "master-index",
  "chapter": "framework_documentation",
  "filename": "00_master_index",
  "path": "/class_template/framework_documentation/00_master_index/"
},{
  "title": "Framework Tutorials",
  "url": "/class_template/framework_tutorials/00_master_index/",
  "content": "Framework Tutorials This master index is automatically generated from all chapter content.\n📖 Overview Step-by-step guides for using the framework. Start here if you\u0026rsquo;re new to the system.\n📊 Content Statistics 3 chapters 6 content files 📚 Chapters Understanding The Framework Chapter covering introduction to the class template framework and its core principles\n📊 2 content files\nContent:\nWhat is this Framework? 🟢 How the Framework Works 🟢 Initial Setup Chapter covering complete step-by-step guide for students and professors from forking the repository to publishing your first site\n📊 3 content files\nContent:\nComplete Workflow Guide: From Fork to First Site 🟢 Running the Setup Script 🟢 Quick Reference Cheat Sheet 🟢 📎 Appendices Github Hugo Terminal Commands Chapter covering quick reference for common github and hugo command-line flags and options\n📊 1 content files\nContent:\nTerminal Flags Quick Reference 🟢 This master index was automatically generated. Do not edit manually.\n",
  "summary": "Master index for Framework Tutorials content",
  "date": "2025-08-03",
  "section": "framework_tutorials",
  "type": "master-index",
  "chapter": "framework_tutorials",
  "filename": "00_master_index",
  "path": "/class_template/framework_tutorials/00_master_index/"
},{
  "title": "Github Hugo Terminal Commands",
  "url": "/class_template/framework_tutorials/a_github_hugo_terminal_commands/00_index/",
  "content": "Github Hugo Terminal Commands This index is automatically generated from the chapter content.\n📚 Chapter Content Terminal Flags Quick Reference Quick reference for common GitHub and Hugo command-line flags and options\n🟢 Easy | ⏱️ 5 min | 📋 Reference\n🧭 Navigation ← Previous: Initial Setup ↑ Back to Framework Tutorials\nThis index was automatically generated. Do not edit manually.\n",
  "summary": "Index for Github Hugo Terminal Commands chapter",
  "date": "2025-08-03",
  "section": "framework_tutorials",
  "type": "index",
  "chapter": "framework_tutorials",
  "filename": "a_github_hugo_terminal_commands",
  "path": "/class_template/framework_tutorials/a_github_hugo_terminal_commands/00_index/"
},{
  "title": "Initial Setup",
  "url": "/class_template/framework_tutorials/02_initial_setup/00_index/",
  "content": "Initial Setup This index is automatically generated from the chapter content.\n📚 Chapter Content Complete Workflow Guide: From Fork to First Site Complete step-by-step guide for students and professors from forking the repository to publishing your first site\n🟢 Easy | ⏱️ 15 min | 📋 Tutorial\nRunning the Setup Script Focused guide on using the start.sh script for initial student directory setup\n🟢 Easy | ⏱️ 3 min | 📋 Tutorial\nQuick Reference Cheat Sheet Quick reference for common commands and workflows - perfect for daily use\n🟢 Easy | ⏱️ 2 min | 📋 Reference\n🧭 Navigation ← Previous: Understanding The Framework ↑ Back to Framework Tutorials Next: Github Hugo Terminal Commands →\nThis index was automatically generated. Do not edit manually.\n",
  "summary": "Index for Initial Setup chapter",
  "date": "2025-08-03",
  "section": "framework_tutorials",
  "type": "index",
  "chapter": "framework_tutorials",
  "filename": "02_initial_setup",
  "path": "/class_template/framework_tutorials/02_initial_setup/00_index/"
},{
  "title": "Synchronization Engine",
  "url": "/class_template/framework_documentation/04_synchronization_engine/00_index/",
  "content": "Synchronization Engine This index is automatically generated from the chapter content.\n📚 Chapter Content Sync Philosophy and Design How the sync system protects student work while enabling professor updates\n🔴 Hard | ⏱️ 12 min | 📋 Documentation\n🧭 Navigation ← Previous: Configuration System ↑ Back to Framework Documentation Next: Tests →\nThis index was automatically generated. Do not edit manually.\n",
  "summary": "Index for Synchronization Engine chapter",
  "date": "2025-08-03",
  "section": "framework_documentation",
  "type": "index",
  "chapter": "framework_documentation",
  "filename": "04_synchronization_engine",
  "path": "/class_template/framework_documentation/04_synchronization_engine/00_index/"
},{
  "title": "Tests",
  "url": "/class_template/framework_documentation/z_tests/00_index/",
  "content": "Tests This index is automatically generated from the chapter content.\n📚 Chapter Content LaTeX Math Rendering Test Testing mathematical formula rendering with KaTeX\n📋 Documentation\nJupyterLite Integration Test Test of JupyterLite integration with natural markdown content\n🟡 Medium | ⏱️ 5 min | 📋 Documentation\n🧭 Navigation ← Previous: Synchronization Engine ↑ Back to Framework Documentation\nThis index was automatically generated. Do not edit manually.\n",
  "summary": "Index for Tests chapter",
  "date": "2025-08-03",
  "section": "framework_documentation",
  "type": "index",
  "chapter": "framework_documentation",
  "filename": "z_tests",
  "path": "/class_template/framework_documentation/z_tests/00_index/"
},{
  "title": "Understanding The Framework",
  "url": "/class_template/framework_tutorials/01_understanding_the_framework/00_index/",
  "content": "Understanding The Framework This index is automatically generated from the chapter content.\n📚 Chapter Content What is this Framework? Introduction to the class template framework and its core principles\n🟢 Easy | ⏱️ 5 min | 📋 Tutorial\nHow the Framework Works Overview of the professor-to-student sync system and directory independence\n🟢 Easy | ⏱️ 7 min | 📋 Overview\n🧭 Navigation ↑ Back to Framework Tutorials Next: Initial Setup →\nThis index was automatically generated. Do not edit manually.\n",
  "summary": "Index for Understanding The Framework chapter",
  "date": "2025-08-03",
  "section": "framework_tutorials",
  "type": "index",
  "chapter": "framework_tutorials",
  "filename": "01_understanding_the_framework",
  "path": "/class_template/framework_tutorials/01_understanding_the_framework/00_index/"
},{
  "title": "Complete Workflow Guide: From Fork to First Site",
  "url": "/class_template/framework_tutorials/02_initial_setup/2025-01-20-tutorial-complete-workflow-guide-f/",
  "content": "This tutorial walks you through the complete process from getting your own copy of the class repository to building and viewing your first website. Perfect for beginners and non-technical users.\n🎯 Quick Overview (TL;DR) For Students:\nFork → Set upstream → Fetch/Merge → Run setup script → Sync → Build → View Later: Edit content → Build → Commit → Push For Professors:\nFork/Clone → Configure course info → Build → Deploy Later: Update content → Build → Deploy 📊 Complete Process Flow graph TD A[Fork Repository] --\u0026gt; B[Clone Your Fork] B --\u0026gt; C[Set Upstream Remote] C --\u0026gt; D[Fetch from Upstream] D --\u0026gt; E{Student or Professor?} E --\u0026gt;|Student| F[Run Setup Script] E --\u0026gt;|Professor| G[Configure Course Info] F --\u0026gt; H[Sync Framework] G --\u0026gt; H H --\u0026gt; I[Build Site with manage.py] I --\u0026gt; J[View Site Locally] J --\u0026gt; K[Edit Content] K --\u0026gt; L[Build Again] L --\u0026gt; M[Commit \u0026amp; Push] M --\u0026gt; N[Site Auto-Deploys] style A fill:#e1f5fe style F fill:#f3e5f5 style G fill:#e8f5e8 style I fill:#fff3e0 style N fill:#e8f5e8 🎓 STUDENT WORKFLOW Step 1: Fork the Repository Go to the class repository (your instructor will provide the link) Example: https://github.com/instructor-username/class_template Click the \u0026ldquo;Fork\u0026rdquo; button (top right of the page) Choose your GitHub account as the destination Wait for the fork to complete (GitHub will redirect you to your fork) You now have: https://github.com/YOUR-USERNAME/class_template\nStep 2: Clone Your Fork to Your Computer Open your terminal (Command Prompt on Windows, Terminal on Mac/Linux) and run:\n1 2 3 4 5 # Replace YOUR-USERNAME with your actual GitHub username git clone https://github.com/YOUR-USERNAME/class_template.git # Go into the repository folder cd class_template What this does: Downloads your copy of the repository to your computer so you can work on it.\nStep 3: Set Upstream Remote (Connect to Instructor) This connects your fork to the instructor\u0026rsquo;s original repository so you can get updates:\n1 2 3 4 5 # Replace INSTRUCTOR-USERNAME with your instructor\u0026#39;s GitHub username git remote add upstream https://github.com/INSTRUCTOR-USERNAME/class_template.git # Verify it worked (you should see \u0026#39;origin\u0026#39; and \u0026#39;upstream\u0026#39;) git remote -v You should see:\norigin https://github.com/YOUR-USERNAME/class_template.git (fetch) origin https://github.com/YOUR-USERNAME/class_template.git (push) upstream https://github.com/INSTRUCTOR-USERNAME/class_template.git (fetch) upstream https://github.com/INSTRUCTOR-USERNAME/class_template.git (push) Step 4: Get Latest Updates from Instructor Before starting, get any updates your instructor may have made:\n1 2 3 4 5 # Fetch all updates from instructor git fetch upstream # Merge instructor\u0026#39;s changes into your main branch git merge upstream/main What this does: Ensures you have the latest content and framework before you start working.\nStep 5: Run the Student Setup Script This creates your personal student directory and sets everything up:\n1 2 3 4 5 # Make sure you\u0026#39;re in the repository root (you should see \u0026#39;students/\u0026#39; folder) ls # Run the setup script with YOUR GitHub username ./students/start.sh YOUR-USERNAME Example: If your GitHub username is alice:\n1 ./students/start.sh alice What you\u0026rsquo;ll see:\n🚀 Setting up student directory for: alice 📁 Creating directory structure... 📋 Copying configuration files... 📚 Creating content directories... 🔄 Running initial sync... ⚙️ Generating Hugo configuration... ✅ Setup complete! Your directory is ready at students/alice/ Step 6: Navigate to Your Directory 1 2 3 4 # Go to your student directory cd students/YOUR-USERNAME # Example: cd students/alice Important: From now on, you\u0026rsquo;ll work inside this directory. This is YOUR space in the repository.\nStep 7: Sync Framework and Build Your Site Use the management script to sync the latest framework and build your site:\n1 2 3 4 5 # Sync framework from professor (gets latest tools/themes) python3 professor/framework_code/scripts/manage.py --sync # Build your website python3 professor/framework_code/scripts/manage.py --build What you\u0026rsquo;ll see:\n🔄 Syncing framework from professor... ✅ Framework sync complete! 🏗️ Building Hugo site... ✅ Site built successfully! 📍 Output: framework_code/hugo_generated/ Step 8: View Your Website Start a local web server to see your site:\n1 2 # Serve your site locally python3 professor/framework_code/scripts/manage.py --dev What you\u0026rsquo;ll see:\n🚀 Starting development server... 📍 Your site is available at: http://localhost:1314 Press Ctrl+C to stop Open your web browser and go to http://localhost:1314 to see your website!\nStep 9: Add Your First Content Create your first note or assignment:\n1 2 3 # Create a new file in your class notes # Use any text editor (VS Code, Sublime, even Notepad) nano class_notes/01_my_first_note.md Add this content:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 --- title: \u0026#34;My First Note\u0026#34; type: \u0026#34;note\u0026#34; date: \u0026#34;2025-01-20\u0026#34; author: \u0026#34;Your Name\u0026#34; summary: \u0026#34;This is my first note in the class\u0026#34; --- # My First Note This is my first note! I can write: - Lists - **Bold text** - *Italic text* - `Code snippets` ## Math (if LaTeX is enabled) When LaTeX is working: $E = mc^2$ ## Python Code ```python print(\u0026#34;Hello, class!\u0026#34;) Great! I\u0026rsquo;m ready to learn.\n### Step 10: Rebuild and View Changes ```bash # Build again to see your changes python3 professor/framework_code/scripts/manage.py --build # Refresh your browser to see the new content Step 11: Save Your Work (Commit and Push) When you\u0026rsquo;re happy with your changes:\n1 2 3 4 5 6 7 8 9 10 11 # Go back to repository root cd ../../ # Add your changes git add students/YOUR-USERNAME/ # Commit with a clear message git commit -m \u0026#34;Add my first note and personal setup\u0026#34; # Push to your fork on GitHub git push origin main What this does: Saves your work to GitHub so it\u0026rsquo;s backed up and can be deployed.\n👨‍🏫 PROFESSOR WORKFLOW Step 1-4: Same as Students Follow the same fork → clone → upstream → fetch process above.\nStep 5: Configure Course Information Edit the course configuration files:\n1 2 # Edit course information nano professor/course.yml Update these key fields:\n1 2 3 4 5 6 7 8 9 10 11 12 course_name: \u0026#34;Your Actual Course Name\u0026#34; course_code: \u0026#34;CS101\u0026#34; # Your course code semester: \u0026#34;Spring 2025\u0026#34; # Current semester professor: name: \u0026#34;Your Name\u0026#34; email: \u0026#34;your.email@university.edu\u0026#34; office_hours: \u0026#34;MW 2-4pm\u0026#34; office_location: \u0026#34;Room 123\u0026#34; resources: repository: \u0026#34;github.com/YOUR-USERNAME/class_template\u0026#34; Step 6: Build and Test Professor Site 1 2 3 4 5 6 7 cd professor # Build the site python3 framework_code/scripts/manage.py --build # Test locally python3 framework_code/scripts/manage.py --dev Open http://localhost:1313 to see your course site.\nStep 7: Deploy to GitHub Pages 1 2 3 4 5 6 7 # From professor directory python3 framework_code/scripts/manage.py --deploy # Or build and commit manually git add . git commit -m \u0026#34;Configure course for Spring 2025\u0026#34; git push origin main 🔄 Daily Workflow (After Initial Setup) For Students: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # 1. Get instructor updates git fetch upstream \u0026amp;\u0026amp; git merge upstream/main # 2. Go to your directory cd students/YOUR-USERNAME # 3. Sync any new framework updates python3 professor/framework_code/scripts/manage.py --sync # 4. Work on content (edit files) # 5. Build and test python3 professor/framework_code/scripts/manage.py --build --dev # 6. When happy, save work cd ../../ git add students/YOUR-USERNAME/ git commit -m \u0026#34;Complete assignment 3\u0026#34; git push origin main For Professors: 1 2 3 4 5 6 7 8 9 10 # 1. Work on content (edit class_notes/, framework_tutorials/, etc.) # 2. Build and test cd professor python3 framework_code/scripts/manage.py --build --dev # 3. Deploy updates (choose one): python3 framework_code/scripts/manage.py --deploy # Deploy only python3 framework_code/scripts/manage.py --publish # Complete build + deploy python3 framework_code/scripts/manage.py --build --deploy # Same as --publish 🛠️ Management Script Reference The manage.py script has several useful flags:\nStatus and Information 1 2 3 4 5 6 7 8 # Check current status python3 professor/framework_code/scripts/manage.py --status # Example output: # 📊 Repository Status # 🏗️ Build Status: Ready (hugo.toml exists) # 📁 Content: 12 files across 3 directories # 🕒 Last build: 2 minutes ago Building and Development 1 2 3 4 5 6 7 8 # Build site only python3 professor/framework_code/scripts/manage.py --build # Build and start development server python3 professor/framework_code/scripts/manage.py --build --dev # Start dev server without building python3 professor/framework_code/scripts/manage.py --dev Syncing (Students only) 1 2 3 4 5 # Sync framework from professor python3 professor/framework_code/scripts/manage.py --sync # Check what would be synced (dry run) python3 professor/framework_code/scripts/manage.py --sync --status Validation and Cleanup 1 2 3 4 5 6 7 8 9 10 11 # Validate content and configuration python3 professor/framework_code/scripts/manage.py --validate # Clean build artifacts python3 professor/framework_code/scripts/manage.py --clean # Deploy (professors) python3 professor/framework_code/scripts/manage.py --deploy # Complete build + deploy (NEW!) python3 professor/framework_code/scripts/manage.py --publish Combining Flags 1 2 3 4 5 6 7 8 9 10 11 12 13 # NEW: Build and deploy together python3 professor/framework_code/scripts/manage.py --build --deploy python3 professor/framework_code/scripts/manage.py --publish # Build and preview python3 professor/framework_code/scripts/manage.py --build --dev # Student workflows python3 professor/framework_code/scripts/manage.py --sync --build python3 professor/framework_code/scripts/manage.py --sync --dev # Complete student workflow (sync + build + preview) python3 professor/framework_code/scripts/manage.py --sync --build --dev 🚨 Troubleshooting Common Issues \u0026ldquo;Permission denied\u0026rdquo; on setup script 1 2 chmod +x students/start.sh ./students/start.sh YOUR-USERNAME \u0026ldquo;Command not found: python3\u0026rdquo; Try just python:\n1 python professor/framework_code/scripts/manage.py --build \u0026ldquo;Port already in use\u0026rdquo; (1313 or 1314) 1 2 3 4 5 # Kill any existing Hugo servers pkill hugo # Or use different port python3 professor/framework_code/scripts/manage.py --dev --port 8080 Hugo not installed See Hugo Installation Guide for your operating system.\nGit upstream issues 1 2 3 # Remove and re-add upstream git remote remove upstream git remote add upstream https://github.com/INSTRUCTOR-USERNAME/class_template.git \u0026ldquo;Nothing to commit\u0026rdquo; but you made changes Make sure you\u0026rsquo;re in the right directory and added files:\n1 2 3 4 5 6 7 8 # Check your current location pwd # Check what changed git status # Add specific files or directories git add students/YOUR-USERNAME/ 📋 What Files You Should Edit vs. Never Touch ✅ Students Should Edit: students/YOUR-USERNAME/class_notes/ - Your class notes and assignments students/YOUR-USERNAME/homework/ - Your homework submissions students/YOUR-USERNAME/personal_projects/ - Your side projects students/YOUR-USERNAME/home.md - Your personal homepage ❌ Students Should NEVER Edit: Anything outside students/YOUR-USERNAME/ students/YOUR-USERNAME/framework_code/ - Gets overwritten by sync Files starting with 00_ - Auto-generated indices hugo.toml - Auto-generated configuration ✅ Professors Should Edit: professor/class_notes/ - Course content professor/framework_tutorials/ - Tutorial content professor/framework_documentation/ - Documentation professor/course.yml - Course metadata professor/config.yml - Visual preferences professor/home.md - Course homepage ❌ Professors Should NEVER Edit: professor/framework_code/hugo_generated/ - Build output Files starting with 00_ - Auto-generated indices professor/hugo.toml - Auto-generated configuration This guide covers the complete workflow from fork to deployment. The management script handles most of the complexity, so you can focus on creating great content rather than managing technical details.\nNext: Check out the Quick Reference Cheat Sheet for fast command lookup!\n",
  "summary": "Complete step-by-step guide for students and professors from forking the repository to publishing your first site",
  "date": "2025-01-20",
  "section": "framework_tutorials",
  "type": "tutorial",
  "chapter": "framework_tutorials",
  "filename": "02_initial_setup",
  "path": "/class_template/framework_tutorials/02_initial_setup/2025-01-20-tutorial-complete-workflow-guide-f/"
},{
  "title": "JupyterLite Integration Test",
  "url": "/class_template/framework_documentation/z_tests/2025-01-20-documentation-jupyterlite-integration-t/",
  "content": "JupyterLite Integration Test This document tests the two-tier JupyterLite integration with natural markdown content.\nTier 1: Inline Python Execution Tests Test 1: Pure Code Layout (Full Width) Simple Python execution taking the full available width:\n🐍 Interactive Python Full Width ▶ Run 📋 Copy 🗑 Clear print(\"🔥 Hello from full-width Python!\") print(\"This editor uses the complete available space\") # Test basic operations numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] total = sum(numbers) average = total / len(numbers) print(f\"Numbers: {numbers}\") print(f\"Total: {total}\") print(f\"Average: {average}\") # Test a function def calculate_factorial(n): if n \u003c= 1: return 1 return n * calculate_factorial(n - 1) print(f\"Factorial of 5: {calculate_factorial(5)}\") Test 2: Two-Column Layout (Code + Explanation) 📋 Copy Python List Comprehensions Tutorial This example demonstrates list comprehensions and functional programming concepts. The code editor appears alongside this explanation, making it perfect for tutorial-style content.\n🎯 Try These Modifications: Change the numbers in the range: range(1, 20) Modify the filtering condition: x % 3 == 0 (multiples of 3) Try different operations: x**3 (cubes), x*2+1 (linear transform) Add your own comprehensions 📚 Learning Objectives: List Comprehensions: [expression for item in iterable if condition] Filter Conditions: Using modulo % for even/odd detection Mathematical Operations: Squares, transformations, aggregations Functional Programming: Clean, readable code patterns 🧮 Mathematical Context: The sum of squares formula: $\\sum_{i=1}^{n} i^2 = \\frac{n(n+1)(2n+1)}{6}$\nFor the first 5 odd numbers: $1^2 + 3^2 + 5^2 + 7^2 + 9^2 = 165$\n🐍 Interactive Python Lesson Mode ▶ Run 📋 Copy 🗑 Clear # List comprehensions and functional programming print(\"🐍 Python List Comprehensions Demo\") # Generate numbers and apply operations numbers = list(range(1, 11)) print(f\"Original numbers: {numbers}\") # Even numbers only evens = [x for x in numbers if x % 2 == 0] print(f\"Even numbers: {evens}\") # Squares of odd numbers odd_squares = [x**2 for x in numbers if x % 2 == 1] print(f\"Odd squares: {odd_squares}\") # More complex operations processed = [x * 2 + 1 for x in evens] print(f\"Processed evens: {processed}\") # Summary statistics print(f\"\\nSummary:\") print(f\"Total evens: {len(evens)}\") print(f\"Sum of odd squares: {sum(odd_squares)}\") Output will appear here when you run the Python code... What to Test: Full Width Layout: Verify the first example uses complete available width with proper sizing Two-Column Layout: Check that explanation appears left, Python editor right with equal heights Eva Theme Styling: Confirm consistent purple accent colors and syntax highlighting Responsive Design: Test on different screen sizes (mobile should stack vertically) Keyboard Shortcuts: Try Ctrl+Enter to run code in both layouts Button Readability: Ensure Run/Clear buttons are visible and accessible in constrained layout Output Formatting: Check that Python output is properly formatted and colored Lab Environment: Click \u0026ldquo;Launch Lab Environment\u0026rdquo; to open JupyterLite Expected Results: ✅ Unified component system with consistent Eva theme styling ✅ Full width editor expands properly for longer code ✅ Two-column layout maintains equal heights and proper alignment ✅ Syntax highlighting using Eva theme colors (purple, green, blue, orange) ✅ Mobile layout stacks vertically with proper spacing ✅ Keyboard shortcuts (Ctrl+Enter) work in both layouts ✅ Output area shows/hides dynamically with proper formatting ✅ Lab environment opens with local file access Test Status: If all layout modes and auto-detection work correctly, the integration is successful! 🎉\n",
  "summary": "Test of JupyterLite integration with natural markdown content",
  "date": "2025-01-20",
  "section": "framework_documentation",
  "type": "documentation",
  "chapter": "framework_documentation",
  "filename": "z_tests",
  "path": "/class_template/framework_documentation/z_tests/2025-01-20-documentation-jupyterlite-integration-t/"
},{
  "title": "LaTeX Math Rendering Test",
  "url": "/class_template/framework_documentation/z_tests/2025-01-20-documentation-latex-math-rendering-test/",
  "content": "LaTeX Math Rendering Test This document tests the LaTeX math rendering capabilities using KaTeX. All mathematical expressions should render beautifully with proper typography.\nInline Math Examples Here are some inline math expressions:\nThe quadratic formula: $x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}$ Einstein\u0026rsquo;s mass-energy equivalence: $E = mc^2$ The derivative of $f(x) = x^2$ is $f'(x) = 2x$ A simple fraction: $\\frac{1}{2} + \\frac{1}{3} = \\frac{5}{6}$ Greek letters: $\\alpha, \\beta, \\gamma, \\Delta, \\Omega$ Subscripts and superscripts: $x_1^2 + x_2^2 = r^2$ Block Math Examples Basic Algebra $$ \\begin{align} (x + y)^2 \u0026= x^2 + 2xy + y^2 \\\\ (x - y)^2 \u0026= x^2 - 2xy + y^2 \\\\ x^2 - y^2 \u0026= (x + y)(x - y) \\end{align} $$Calculus The fundamental theorem of calculus:\n$$ \\int_a^b f'(x) \\, dx = f(b) - f(a) $$Derivative of exponential function:\n$$ \\frac{d}{dx} e^x = e^x $$Integration by parts:\n$$ \\int u \\, dv = uv - \\int v \\, du $$Linear Algebra Matrix multiplication (single line):\n$$\\begin{pmatrix} a \u0026 b \\\\ c \u0026 d \\end{pmatrix} \\begin{pmatrix} e \u0026 f \\\\ g \u0026 h \\end{pmatrix} = \\begin{pmatrix} ae + bg \u0026 af + bh \\\\ ce + dg \u0026 cf + dh \\end{pmatrix}$$Alternative with brackets:\n$$\\begin{bmatrix} a \u0026 b \\\\ c \u0026 d \\end{bmatrix} \\begin{bmatrix} e \u0026 f \\\\ g \u0026 h \\end{bmatrix} = \\begin{bmatrix} ae + bg \u0026 af + bh \\\\ ce + dg \u0026 cf + dh \\end{bmatrix}$$Determinant of a 2×2 matrix:\n$$ \\det \\begin{pmatrix} a \u0026 b \\\\ c \u0026 d \\end{pmatrix} = ad - bc $$Complex Expressions The quadratic formula:\n$$ x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$Euler\u0026rsquo;s identity:\n$$ e^{i\\pi} + 1 = 0 $$Summation notation:\n$$ \\sum_{n=1}^{\\infty} \\frac{1}{n^2} = \\frac{\\pi^2}{6} $$Probability and Statistics Normal distribution:\n$$ f(x) = \\frac{1}{\\sigma\\sqrt{2\\pi}} e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2} $$Bayes\u0026rsquo; theorem:\n$$ P(A|B) = \\frac{P(B|A) \\cdot P(A)}{P(B)} $$Test Results If you can see properly formatted mathematical expressions above, then KaTeX is working correctly. All formulas should render with:\nProper mathematical typography Correctly sized fractions and symbols Proper spacing and alignment Clear matrix and vector notation Troubleshooting If math is not rendering:\nCheck that KaTeX CSS and JavaScript are loaded Verify that the math rendering module is initialized Check browser console for errors Ensure Hugo\u0026rsquo;s math passthrough is enabled ",
  "summary": "Testing mathematical formula rendering with KaTeX",
  "date": "2025-01-20",
  "section": "framework_documentation",
  "type": "documentation",
  "chapter": "framework_documentation",
  "filename": "z_tests",
  "path": "/class_template/framework_documentation/z_tests/2025-01-20-documentation-latex-math-rendering-test/"
},{
  "title": "Quick Reference Cheat Sheet",
  "url": "/class_template/framework_tutorials/02_initial_setup/a_quick_reference_cheat_sheet/",
  "content": "Perfect for bookmarking! The most common commands and workflows you\u0026rsquo;ll use daily.\n🚀 Essential Daily Commands Students (Most Common) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # 1. Get updates from instructor cd /path/to/class_template git fetch upstream \u0026amp;\u0026amp; git merge upstream/main # 2. Go to your directory and sync cd students/YOUR-USERNAME python3 professor/framework_code/scripts/manage.py --sync # 3. Build and preview your work python3 professor/framework_code/scripts/manage.py --build --dev # Opens: http://localhost:1314 # 4. Save your work cd ../../ git add students/YOUR-USERNAME/ git commit -m \u0026#34;Your message here\u0026#34; git push origin main Professors (Most Common) 1 2 3 4 5 6 7 8 9 10 11 # 1. Work in professor directory cd professor # 2. Build and preview python3 framework_code/scripts/manage.py --build --dev # Opens: http://localhost:1313 # 3. Deploy updates (NEW OPTIONS!) python3 framework_code/scripts/manage.py --publish # Complete build + deploy python3 framework_code/scripts/manage.py --build --deploy # Same as above python3 framework_code/scripts/manage.py --deploy # Deploy only 🛠️ Management Script Quick Reference Single Actions Command What It Does Use When --status Show current state Check before building --build Build website After editing content --dev Start local server Preview your work --sync Get professor updates Students: get latest framework --clean Remove build files Fix build problems --validate Check content format Before committing --deploy Build and deploy to production Professors: publish updates --publish NEW! Complete build + deploy Professors: one-step publishing Common Combinations Commands What It Does Perfect For --build --dev Build and preview Daily content work --build --deploy NEW! Build and publish One-step deployment --sync --build Update and build Students: get updates + build --sync --dev Update and preview Students: quick preview --sync --build --dev Update, build, preview Students: complete workflow 📁 Directory Quick Navigation Know Where You Are 1 2 3 pwd # Show current directory ls # List files here ls students/ # List all student directories Quick Directory Jumps 1 2 3 4 5 6 7 8 # From anywhere in repository: cd professor # Professor workspace cd students/YOUR-USERNAME # Your student workspace cd professor/framework_code/scripts # Scripts location # From student directory: cd ../../ # Back to repository root cd professor/framework_code/scripts # Access management script 🔧 Git Workflow Cheat Sheet Initial Setup (One Time) 1 2 3 # After forking and cloning: git remote add upstream https://github.com/INSTRUCTOR-USERNAME/class_template.git git remote -v # Verify (should see origin + upstream) Daily Git Workflow 1 2 3 4 5 6 7 8 9 10 11 # 1. Get instructor updates git fetch upstream git merge upstream/main # 2. Work on your content... # 3. Save and upload your work git add students/YOUR-USERNAME/ # Add your changes git status # Check what will be committed git commit -m \u0026#34;Describe your work\u0026#34; # Save with message git push origin main # Upload to your GitHub Check Status 1 2 3 git status # What changed? git log --oneline -5 # Recent commits git remote -v # What remotes are set up? 🌐 Server Management Local Development Servers URL Who Uses Port Command http://localhost:1313 Professors 1313 manage.py --dev from professor/ http://localhost:1314 Students 1314 manage.py --dev from students/username/ Server Problems 1 2 3 4 5 # Port busy? Kill existing servers: pkill hugo # Or use different port: python3 professor/framework_code/scripts/manage.py --dev --port 8080 📝 Content Creation Quick Guide File Naming Rules Type Example Location Class note 01_intro_to_python.md class_notes/ Homework hw_01_variables.md anywhere Code file 01_a_intro_examples.py next to related .md Appendix A_advanced_topics.md any chapter Required Front Matter (Copy \u0026amp; Edit) 1 2 3 4 5 6 7 --- title: \u0026#34;Your Title Here\u0026#34; type: \u0026#34;note\u0026#34; # note, homework, tutorial, reference date: \u0026#34;2025-01-20\u0026#34; # Today\u0026#39;s date author: \u0026#34;Your Name\u0026#34; summary: \u0026#34;One sentence description\u0026#34; --- 🚨 Emergency Troubleshooting \u0026ldquo;Permission denied\u0026rdquo; 1 2 chmod +x students/start.sh chmod +x professor/framework_code/scripts/manage.sh \u0026ldquo;Command not found: python3\u0026rdquo; 1 2 # Try just \u0026#39;python\u0026#39; instead: python professor/framework_code/scripts/manage.py --build \u0026ldquo;Hugo not found\u0026rdquo; 1 2 3 4 # Check if Hugo is installed: hugo version # If not installed, see: https://gohugo.io/installation/ \u0026ldquo;Nothing to commit\u0026rdquo; 1 2 3 # Check you\u0026#39;re adding the right files: git status git add students/YOUR-USERNAME/ # Add your specific directory Git Merge Conflicts 1 2 3 4 5 # If you get conflicts during merge: git status # Shows conflicted files # Edit files to resolve conflicts (look for \u0026lt;\u0026lt;\u0026lt;\u0026lt; and \u0026gt;\u0026gt;\u0026gt;\u0026gt;) git add . git commit -m \u0026#34;Resolve merge conflicts\u0026#34; Start Over (Nuclear Option) 1 2 3 4 # Delete your changes and get clean copy: git fetch upstream git reset --hard upstream/main git push origin main --force # BE CAREFUL! This erases your work! 📱 One-Line Workflows Students: Complete Daily Workflow 1 cd class_template \u0026amp;\u0026amp; git fetch upstream \u0026amp;\u0026amp; git merge upstream/main \u0026amp;\u0026amp; cd students/YOUR-USERNAME \u0026amp;\u0026amp; python3 professor/framework_code/scripts/manage.py --sync --build --dev Professors: Quick Update \u0026amp; Deploy 1 2 3 cd professor \u0026amp;\u0026amp; python3 framework_code/scripts/manage.py --publish # OR (equivalent): cd professor \u0026amp;\u0026amp; python3 framework_code/scripts/manage.py --build --deploy Emergency Clean Build 1 python3 professor/framework_code/scripts/manage.py --clean --build --dev 📚 File Organization Rules ✅ Safe to Edit students/YOUR-USERNAME/class_notes/ - Your notes students/YOUR-USERNAME/homework/ - Your homework students/YOUR-USERNAME/home.md - Your homepage professor/class_notes/ - Course content (professors) professor/course.yml - Course info (professors) ❌ Never Touch framework_code/hugo_generated/ - Auto-built files Files starting with 00_ - Auto-generated hugo.toml - Auto-generated config students/YOUR-USERNAME/framework_code/ - Gets overwritten 🔍 Quick Diagnostics Is Everything Working? 1 2 3 4 5 6 7 8 9 10 11 12 # Check basics: pwd # Where am I? ls # What\u0026#39;s here? git remote -v # Git setup OK? python3 --version # Python works? hugo version # Hugo installed? # Check framework: python3 professor/framework_code/scripts/manage.py --status # Test build: python3 professor/framework_code/scripts/manage.py --build Common Status Messages ✅ Build complete = Everything working ⚠️ Hugo config missing = Run setup script ❌ Validation failed = Fix front matter in content files 🔄 Sync available = Updates from instructor 📌 Bookmark this page! Most problems can be solved with these commands.\nNeed more help? See the Complete Workflow Guide for detailed explanations.\n",
  "summary": "Quick reference for common commands and workflows - perfect for daily use",
  "date": "2025-01-20",
  "section": "framework_tutorials",
  "type": "reference",
  "chapter": "framework_tutorials",
  "filename": "02_initial_setup",
  "path": "/class_template/framework_tutorials/02_initial_setup/a_quick_reference_cheat_sheet/"
},{
  "title": "Running the Setup Script",
  "url": "/class_template/framework_tutorials/02_initial_setup/2025-01-20-tutorial-running-the-setup-script/",
  "content": " 📋 For the Complete Workflow: See Complete Workflow Guide for the full step-by-step process from fork to first site.\nThe framework includes an automated setup script that creates your personal student directory with all necessary files. This tutorial focuses specifically on the setup script itself.\nWhat the Script Does The students/start.sh script automatically:\nCreates your directory at students/\u0026lt;your-username\u0026gt;/ Copies essential files from professor (config.yml, course.yml, home.md) Creates your content directories (class_notes/, personal_projects/, homework/) Runs initial sync to get current framework code Generates your Hugo config for immediate site building Prerequisites Before running the setup script, make sure you have:\n✅ Forked the repository ✅ Cloned your fork to your computer ✅ Set up upstream remote (connection to instructor\u0026rsquo;s repository) ✅ Fetched latest updates from instructor Need help with prerequisites? See Complete Workflow Guide for detailed instructions.\nRunning the Script From the repository root directory (where you can see the students/ folder):\n1 2 3 4 5 6 # Check you\u0026#39;re in the right place ls # You should see: professor/ students/ dna.yml README.md etc. # Run the setup script with YOUR GitHub username ./students/start.sh YOUR-USERNAME ⚠️ Important: Use your exact GitHub username as the parameter.\nExample If your GitHub username is alice:\n1 ./students/start.sh alice What You\u0026rsquo;ll See The script provides clear output showing each step:\n🚀 Setting up student directory for: alice 📁 Creating directory structure... ✓ Created students/alice/ ✓ Created students/alice/class_notes/ ✓ Created students/alice/homework/ ✓ Created students/alice/personal_projects/ 📋 Copying configuration files... ✓ Copied professor/config.yml → students/alice/config.yml ✓ Copied professor/course.yml → students/alice/course.yml ✓ Copied professor/home.md → students/alice/home.md 📚 Creating content directories... ✓ Content structure ready 🔄 Running initial sync... ✓ Framework code synced from professor ✓ Themes and components updated ⚙️ Generating Hugo configuration... ✓ hugo.toml created and configured ✅ Setup complete! Your directory is ready at students/alice/ Next steps: 1. Navigate to your directory: cd students/alice/ 2. Build your site: python3 professor/framework_code/scripts/manage.py --build 3. Preview your site: python3 professor/framework_code/scripts/manage.py --dev After Setup: Your Directory Structure Once the script completes, you\u0026rsquo;ll have:\nstudents/alice/ ├── class_notes/ # Your class notes and assignments ├── homework/ # Your homework submissions ├── personal_projects/ # Your side projects ├── framework_code/ # Framework tools (synced from professor) │ ├── themes/ │ ├── components/ │ ├── scripts/ │ └── ... ├── config.yml # Your rendering preferences (copied from professor) ├── course.yml # Course information (copied from professor) ├── home.md # Your personal homepage (copied from professor) └── hugo.toml # Auto-generated Hugo configuration Script Options and Behavior Basic Usage 1 ./students/start.sh USERNAME What If Directory Already Exists? The script will check if the directory already exists:\n1 2 3 ./students/start.sh alice # Output: ⚠️ Directory students/alice/ already exists! # Use --force to overwrite or choose a different username. Force Overwrite (Use Carefully) 1 2 ./students/start.sh alice --force # This will DELETE existing directory and create fresh one ⚠️ Warning: --force will completely remove your existing directory and all your work. Only use if you want to start completely over.\nTroubleshooting \u0026ldquo;Permission denied\u0026rdquo; Error 1 2 chmod +x students/start.sh ./students/start.sh YOUR-USERNAME \u0026ldquo;No such file or directory\u0026rdquo; Make sure you\u0026rsquo;re in the repository root:\n1 2 3 4 5 6 7 # Check current location pwd # Should end with: .../class_template # List files to verify ls # Should see: professor/ students/ dna.yml etc. Script Fails During Sync If the sync step fails:\n1 2 3 # Try manual sync after setup cd students/YOUR-USERNAME python3 professor/framework_code/scripts/manage.py --sync Hugo Config Generation Fails 1 2 3 # Manually generate Hugo config cd students/YOUR-USERNAME python3 professor/framework_code/scripts/generate_hugo_config.py Next Steps After Running Setup Navigate to your directory:\n1 cd students/YOUR-USERNAME Build your first site:\n1 python3 professor/framework_code/scripts/manage.py --build --dev View your site: Open http://localhost:1314 in your browser\nStart creating content: Add files to class_notes/ directory\nLearn the daily workflow: See Complete Workflow Guide\nWhat the Setup Script Does NOT Do The setup script only handles initial directory creation. It does NOT:\n❌ Fork the repository for you ❌ Clone repositories ❌ Set up Git remotes ❌ Install Hugo or Python ❌ Manage Git commits/pushes For complete setup including these steps, see Complete Workflow Guide.\nThe setup script handles all the complex initialization automatically, so you can focus on learning and creating content rather than configuration management.\nReady for the full workflow? Continue with Complete Workflow Guide to learn the complete process from fork to deployment.\n",
  "summary": "Focused guide on using the start.sh script for initial student directory setup",
  "date": "2025-01-20",
  "section": "framework_tutorials",
  "type": "tutorial",
  "chapter": "framework_tutorials",
  "filename": "02_initial_setup",
  "path": "/class_template/framework_tutorials/02_initial_setup/2025-01-20-tutorial-running-the-setup-script/"
},{
  "title": "Class Notes",
  "url": "/class_template/class_notes/00_master_index/",
  "content": "Class Notes This master index is automatically generated from all chapter content.\n📖 Overview Main instructional content for the class. This is where course materials, lectures, and learning resources are organized.\n📊 Content Statistics 0 chapters 0 content files 📚 Chapters No chapters available yet. Create numbered chapter directories (01_introduction/, 02_basics/, etc.) to see them listed here.\nThis master index was automatically generated. Do not edit manually.\n",
  "summary": "Master index for Class Notes content",
  "date": "2025-01-16",
  "section": "class_notes",
  "type": "master-index",
  "chapter": "class_notes",
  "filename": "00_master_index",
  "path": "/class_template/class_notes/00_master_index/"
},{
  "title": "Terminal Flags Quick Reference",
  "url": "/class_template/framework_tutorials/a_github_hugo_terminal_commands/01_terminal_flags_quick_reference/",
  "content": "A simple reference for the most useful command-line flags when working with GitHub and Hugo.\n🐙 GitHub CLI Commands Basic Repository Operations 1 2 3 4 5 6 7 8 9 10 11 # Clone with specific branch git clone -b branch-name https://github.com/user/repo.git # Force push (use with caution!) git push --force-with-lease # Show commit history in one line git log --oneline --graph --decorate # Check status with short format git status -s Useful Git Flags --dry-run - Preview what would happen without making changes --verbose - Show detailed output --quiet - Suppress most output --force-with-lease - Safer alternative to --force 🏗️ Hugo Command Flags Development Server 1 2 3 4 5 6 7 8 9 10 11 # Start development server hugo server # Start with drafts included hugo server -D # Start on specific port hugo server --port 1314 # Start with fast rebuild hugo server --disableFastRender=false Building Sites 1 2 3 4 5 6 7 8 9 10 11 # Build for production hugo --minify # Build to specific directory hugo --destination docs/ # Build with base URL hugo --baseURL https://mysite.com/ # Show build statistics hugo --templateMetrics Useful Hugo Flags -D, --buildDrafts - Include draft content --minify - Minify HTML, CSS, JS --verbose - Detailed logging --quiet - Minimal output --cleanDestinationDir - Remove files from destination not found in static dirs 💡 Pro Tips Use --help - Every command has help: git --help, hugo server --help Combine flags - Many flags can be used together: hugo server -D --port 1314 Check versions - Use git --version and hugo version for troubleshooting 🔗 Quick Links Git Documentation Hugo CLI Reference GitHub CLI Handbook ",
  "summary": "Quick reference for common GitHub and Hugo command-line flags and options",
  "date": "2025-01-16",
  "section": "framework_tutorials",
  "type": "reference",
  "chapter": "framework_tutorials",
  "filename": "a_github_hugo_terminal_commands",
  "path": "/class_template/framework_tutorials/a_github_hugo_terminal_commands/01_terminal_flags_quick_reference/"
},{
  "title": "Configuration Merging Logic",
  "url": "/class_template/framework_documentation/03_configuration_system/2024-01-15-documentation-configuration-merging-log/",
  "content": "This document explains how the generate_hugo_config.py script merges configuration from multiple sources to create the final hugo.toml file.\nMerge Order The configuration system reads files in this order:\ncourse.yml - Course metadata (base layer) config.yml - Rendering preferences (override layer) Merge Behavior When the same key exists in both files:\nconfig.yml values override course.yml values This allows course-specific customization of framework defaults Example Merge course.yml:\n1 2 3 4 course_name: \u0026#34;Data Science 101\u0026#34; professor_name: \u0026#34;Dr. Jane Smith\u0026#34; theme: name: \u0026#34;default\u0026#34; config.yml:\n1 2 3 4 theme: name: \u0026#34;evangelion\u0026#34; accessibility: default_font: \u0026#34;opendyslexic\u0026#34; Result:\n1 2 3 4 5 6 course_name: \u0026#34;Data Science 101\u0026#34; professor_name: \u0026#34;Dr. Jane Smith\u0026#34; theme: name: \u0026#34;evangelion\u0026#34; # config.yml override accessibility: default_font: \u0026#34;opendyslexic\u0026#34; # config.yml addition This merging strategy enables flexible course customization while maintaining consistent base metadata.\n",
  "summary": "How generate_hugo_config.py merges course.yml and config.yml into hugo.toml",
  "date": "2024-01-15",
  "section": "framework_documentation",
  "type": "documentation",
  "chapter": "framework_documentation",
  "filename": "03_configuration_system",
  "path": "/class_template/framework_documentation/03_configuration_system/2024-01-15-documentation-configuration-merging-log/"
},{
  "title": "DNA.yml Specification",
  "url": "/class_template/framework_documentation/03_configuration_system/2024-01-15-documentation-dnayml-specification/",
  "content": "The dna.yml file at the repository root contains meta-process controls only - it manages framework behavior and automation settings but never contains rendering preferences.\nPurpose and Scope dna.yml controls:\nFramework automation behavior CI/CD pipeline settings Repository-wide operational flags Cross-directory meta-process coordination dna.yml does NOT control:\nVisual appearance (belongs in config.yml) Course content (belongs in course.yml) Theme selection (belongs in config.yml) Hugo rendering settings (belongs in config.yml) Required Fields professor_profile 1 professor_profile: uumami Purpose: Identifies the professor\u0026rsquo;s directory for sync operations and automation. Type: String Required: Yes Example: The professor\u0026rsquo;s GitHub username\nFramework Meta-Process Settings sync_mode 1 sync_mode: additive Purpose: Controls how sync operations behave Type: String (enum) Options: additive, selective, forced Default: additive\nauthoring_tools 1 authoring_tools: [\u0026#34;agent\u0026#34;] Purpose: Specifies which authoring tools are enabled Type: Array of strings Options: [\u0026quot;agent\u0026quot;], [\u0026quot;manual\u0026quot;], [\u0026quot;agent\u0026quot;, \u0026quot;manual\u0026quot;]\nlicense 1 license: CC-BY-4.0 Purpose: Default license for framework content Type: String Common values: CC-BY-4.0, MIT, GPL-3.0\nBuild and CI/CD Settings hugo_auto_config 1 hugo_auto_config: true Purpose: Enable automatic Hugo configuration generation Type: Boolean Default: true\naccessibility_enabled 1 accessibility_enabled: true Purpose: Enable framework-level accessibility features Type: Boolean Default: true\nindex_generation 1 index_generation: true Purpose: Enable automatic index file generation Type: Boolean Default: true\nAdvanced Meta-Process Options strict_validation 1 strict_validation: false Purpose: Control whether validation failures abort builds Type: Boolean Default: false\ncontent_validation 1 content_validation: true Purpose: Enable/disable content metadata validation Type: Boolean Default: true\nauto_deploy 1 auto_deploy: true Purpose: Enable automatic deployment workflows Type: Boolean Default: true\nFile Location and Access Location: Repository root (/dna.yml) Read by: Framework scripts, CI/CD workflows Modified by: Framework maintainers, repository administrators Frequency: Rarely (only for operational changes) The dna.yml file ensures consistent framework behavior across all directories while maintaining the self-contained principle for rendering operations.\n",
  "summary": "Complete specification for dna.yml meta-process configuration file",
  "date": "2024-01-15",
  "section": "framework_documentation",
  "type": "documentation",
  "chapter": "framework_documentation",
  "filename": "03_configuration_system",
  "path": "/class_template/framework_documentation/03_configuration_system/2024-01-15-documentation-dnayml-specification/"
},{
  "title": "How the Framework Works",
  "url": "/class_template/framework_tutorials/01_understanding_the_framework/02_how_it_works_overview/",
  "content": "The framework operates on a simple but powerful model: professor as source of truth with smart synchronization to student directories. This tutorial explains how this works in practice.\nDirectory Structure The framework uses a two-directory model:\nrepository/ ├── professor/ # Source of truth - all authoritative content │ ├── class_notes/ │ ├── framework_code/ │ └── config files └── students/ ├── alice/ # Alice\u0026#39;s independent workspace ├── bob/ # Bob\u0026#39;s independent workspace └── charlie/ # Charlie\u0026#39;s independent workspace The Sync Process The magic happens through sync_student.py, our smart synchronization system:\n1. Non-Destructive Updates Never overwrites student-modified files Only adds new files or updates unchanged professor files Preserves student work completely 2. Smart Exclusions The sync system automatically excludes:\nAuto-generated files (hugo.toml, 00_index.md) Build artifacts (hugo_generated/) Student personal work Development cache files 3. Framework Updates Students get:\nNew course content from professor Framework improvements and bug fixes Theme updates and new features Configuration updates (when appropriate) Self-Contained Operation Each student directory is completely independent:\nOwn configuration files (config.yml, course.yml) Own Hugo site generation - no dependencies on professor directory Own theme customization - can modify colors, fonts, layout Own content organization - can add personal notes and projects Example Workflow Professor creates content in /professor/class_notes/02_new_topic/ Student runs sync: python3 professor/framework_code/scripts/sync_student.py New content appears in student\u0026rsquo;s directory automatically Student\u0026rsquo;s existing work remains completely untouched Student builds site: hugo in their directory Benefits of This Model Scale infinitely - works with 1 or 1000 students No conflicts - each student has their own space Easy updates - professor changes propagate automatically Student freedom - full control over their own environment Backup built-in - student work lives in their own Git repository This architecture enables the automated, friction-free educational experience that makes the framework powerful for both professors and students.\n",
  "summary": "Overview of the professor-to-student sync system and directory independence",
  "date": "2024-01-15",
  "section": "framework_tutorials",
  "type": "overview",
  "chapter": "framework_tutorials",
  "filename": "01_understanding_the_framework",
  "path": "/class_template/framework_tutorials/01_understanding_the_framework/02_how_it_works_overview/"
},{
  "title": "Sync Philosophy and Design",
  "url": "/class_template/framework_documentation/04_synchronization_engine/2024-01-15-documentation-sync-philosophy-and-desig/",
  "content": "The synchronization system is built on a fundamental principle: student work is sacred and must never be lost. This document explains the design philosophy and technical implementation that ensures safe, non-destructive updates.\nCore Philosophy 1. Non-Destructive by Default Never overwrite files that students have modified Only add new files or update unchanged professor files Preserve all student modifications regardless of content 2. Smart Exclusions The sync system automatically excludes files that should never be synchronized:\nAuto-generated content (hugo.toml, 00_index.md) Build artifacts (hugo_generated/, cache files) Student personal work (homework solutions, personal projects) Development artifacts (.git/, temporary files) 3. Additive Operation Model Sync adds new content from professor Sync updates unchanged framework files Sync skips any file touched by the student Sync reports what was changed for transparency Technical Implementation File Comparison Strategy 1 2 3 4 5 6 SYNC_EXCLUSIONS = [ \u0026#39;framework_generated\u0026#39;, # Auto-generated Hugo files \u0026#39;build_cache\u0026#39;, # Build artifacts \u0026#39;personal_dev\u0026#39;, # Student development files \u0026#39;version_control\u0026#39; # Git and version control ] Protection Mechanisms Checksum verification - Detect student modifications Exclusion patterns - Skip inappropriate files automatically Safe copying - Atomic operations to prevent corruption Rich reporting - Clear feedback on what changed Future: KEEP Block System Planned enhancement for forced updates:\n1 2 3 \u0026lt;!-- KEEP:START --\u0026gt; Student\u0026#39;s custom content here \u0026lt;!-- KEEP:END --\u0026gt; This syntax will preserve specific content blocks even during forced professor updates.\nBenefits Scale indefinitely - Works with 1 or 1000 students Zero conflicts - Students never lose work Professor control - Can update framework and content Student freedom - Can customize and modify safely Transparent operation - Clear reporting of all changes This philosophy enables worry-free collaboration where professors can update course content and framework features while students maintain complete autonomy over their work environment.\n",
  "summary": "How the sync system protects student work while enabling professor updates",
  "date": "2024-01-15",
  "section": "framework_documentation",
  "type": "documentation",
  "chapter": "framework_documentation",
  "filename": "04_synchronization_engine",
  "path": "/class_template/framework_documentation/04_synchronization_engine/2024-01-15-documentation-sync-philosophy-and-desig/"
},{
  "title": "What is this Framework?",
  "url": "/class_template/framework_tutorials/01_understanding_the_framework/2024-01-15-tutorial-what-is-this-framework/",
  "content": "This GitHub Class Template Repository framework solves a fundamental problem in educational content delivery: how to create a consistent, automated, and flexible system for professors to distribute course materials while allowing students to maintain their own independent work environments.\nThe Problem We Solve Traditional course websites require either:\nStatic sites that are hard to update and customize Complex LMS systems that lock you into specific platforms Manual file sharing that becomes chaotic with multiple students Our framework provides a third option: a structured, automated system that gives professors full control over content while giving students their own customizable workspace.\nCore Philosophy The framework is built on three key principles from core.md:\nProfessor as Source of Truth - All authoritative content lives in /professor Student Independence - Each student works in /students/\u0026lt;username\u0026gt; with full autonomy Automation First - Everything that can be automated, will be automated How It Works The framework uses a template repository approach where:\nProfessors maintain the master template with all course content Students fork the repository and work in their own directories A smart sync system keeps student directories updated without overwriting their work Each directory generates its own independent website This approach scales from a single student to hundreds of students while maintaining clean separation and avoiding conflicts.\nWhat You Get When properly set up, you\u0026rsquo;ll have:\nYour own course website built automatically from your content Sync system that pulls updates from your professor safely Professional theme optimized for educational content Self-contained setup that works independently The next tutorial will explain exactly how this sync and independence model works in practice.\n",
  "summary": "Introduction to the class template framework and its core principles",
  "date": "2024-01-15",
  "section": "framework_tutorials",
  "type": "tutorial",
  "chapter": "framework_tutorials",
  "filename": "01_understanding_the_framework",
  "path": "/class_template/framework_tutorials/01_understanding_the_framework/2024-01-15-tutorial-what-is-this-framework/"
}]