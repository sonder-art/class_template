# GitHub Class Template Framework - Hugo Publishing Workflow
# Automatically builds and deploys the Hugo-based class framework to GitHub Pages
# Uses the framework's manage.sh entry point and respects dna.yml configuration

name: Build and Deploy Framework

# Run this workflow when a push is made to the main branch
on:
  push:
    branches: [main]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets the permissions for the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      auto_deploy: ${{ steps.read_config.outputs.auto_deploy }}
      target_dir: ${{ steps.read_config.outputs.target_dir }}
      professor_profile: ${{ steps.read_config.outputs.professor_profile }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Set up Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 'latest'
          extended: true

      - name: Read framework configuration and determine render target
        id: read_config
        run: |
          # Read professor profile from dna.yml
          if [[ -f "dna.yml" ]]; then
            PROFESSOR_PROFILE=$(grep "professor_profile:" dna.yml | cut -d' ' -f2)
            echo "Found professor profile: $PROFESSOR_PROFILE"
            
            # Check if auto_deploy is enabled
            AUTO_DEPLOY=$(grep "auto_deploy:" dna.yml | cut -d' ' -f2)
            echo "Auto deploy setting: $AUTO_DEPLOY"
          else
            echo "No dna.yml found, using defaults"
            PROFESSOR_PROFILE="professor"
            AUTO_DEPLOY="true"
          fi
          
          # Set job outputs (for use in other jobs)
          echo "auto_deploy=$AUTO_DEPLOY" >> $GITHUB_OUTPUT
          echo "professor_profile=$PROFESSOR_PROFILE" >> $GITHUB_OUTPUT
          
          # Set environment variables (for use in this job)
          echo "PROFESSOR_PROFILE=$PROFESSOR_PROFILE" >> $GITHUB_ENV
          echo "AUTO_DEPLOY=$AUTO_DEPLOY" >> $GITHUB_ENV
          
          # Determine which directory to build based on GitHub actor and framework logic
          GITHUB_ACTOR="${{ github.actor }}"
          echo "GitHub actor: $GITHUB_ACTOR"
          
          # Check if actor is the professor
          if [[ "$GITHUB_ACTOR" == "$PROFESSOR_PROFILE" ]]; then
            # Professor pushes: always build professor directory
            TARGET_DIR="professor"
            echo "🎓 Professor detected - building professor directory"
          elif [[ -d "students/$GITHUB_ACTOR" ]]; then
            # Student pushes: build their student directory if it exists
            TARGET_DIR="students/$GITHUB_ACTOR"
            echo "🎒 Student detected - building student directory: $TARGET_DIR"
          else
            # Fallback: build professor directory (template/demo mode)
            TARGET_DIR="professor"
            echo "📚 No specific directory found - building professor directory as fallback"
          fi
          
          # Set outputs and environment variables
          echo "target_dir=$TARGET_DIR" >> $GITHUB_OUTPUT
          echo "TARGET_DIR=$TARGET_DIR" >> $GITHUB_ENV
          echo "Final build target: $TARGET_DIR"

      - name: Install Python dependencies
        run: |
          # Install framework dependencies for the build scripts
          python -m pip install --upgrade pip
          
          # Install from requirements.txt for reproducible builds
          pip install -r requirements.txt
          
          echo "✅ Python dependencies installed from requirements.txt"

      - name: Validate framework setup
        run: |
          # Verify the target directory exists
          if [[ ! -d "$TARGET_DIR" ]]; then
            echo "❌ Target directory not found: $TARGET_DIR"
            exit 1
          fi
          
          # Check NEW architecture - shared framework at root level
          if [[ ! -f "manage.sh" ]]; then
            echo "❌ Missing root-level manage.sh entry point"
            exit 1
          fi
          
          if [[ ! -f "framework/scripts/manage.py" ]]; then
            echo "❌ Missing framework management script at framework/scripts/manage.py"
            exit 1
          fi
          
          if [[ ! -d "framework/scripts/manage_modules" ]]; then
            echo "❌ Missing modular framework at framework/scripts/manage_modules/"
            exit 1
          fi
          
          # Make manage.sh executable
          chmod +x manage.sh
          
          # Create or update build.yml for the target
          echo "📝 Configuring build.yml for target: $TARGET_DIR"
          
          # Determine mode and port based on target directory
          if [[ "$TARGET_DIR" == "professor" ]]; then
            BUILD_MODE="professor"
            BUILD_PORT="1313"
          else
            BUILD_MODE="student"
            BUILD_PORT="1314"
          fi
          
          # Create build.yml with proper variable substitution
          {
            echo "# GitHub Actions Build Configuration"
            echo "# Auto-generated for deployment"
            echo ""
            echo "build:"
            echo "  target_directory: \"$TARGET_DIR\""
            echo "  mode: \"$BUILD_MODE\""
            echo "  dev_server:"
            echo "    port: $BUILD_PORT"
            echo ""
            echo "user:"
            echo "  github_username: \"${{ github.actor }}\""
            echo "  role: \"$BUILD_MODE\""
            echo ""
            echo "structure:"
            echo "  professor_directory: \"professor\""
            echo ""
            echo "hugo:"
            echo "  command: \"hugo\""
            echo "  environment:"
            echo "    HUGO_ENV: \"production\""
          } > build.yml
          
          # For student directories, verify basic student files exist
          if [[ "$TARGET_DIR" =~ ^students/ ]]; then
            echo "🔍 Validating student directory: $TARGET_DIR"
            
            if [[ ! -f "$TARGET_DIR/config.yml" ]]; then
              echo "❌ Missing config.yml in $TARGET_DIR"
              echo "Student directories should be created using students/start.sh"
              exit 1
            fi
            
            echo "✅ Student directory validation passed"
          fi
          
          echo "✅ Framework structure validated for $TARGET_DIR (new architecture)"

      - name: Build framework site
        run: |
          echo "🚀 Building framework site for target: $TARGET_DIR..."
          
          # Debug: Show build configuration
          echo "🔍 Contents of build.yml:"
          cat build.yml
          echo ""
          
          # Debug: Check manage.sh behavior
          echo "🔍 Testing manage.sh detection:"
          ./manage.sh --help || echo "manage.sh --help failed"
          echo ""
          
          # Use the root-level manage.sh with new architecture
          echo "🔍 Running build command with full output capture:"
          echo "🔍 Environment variables:"
          env | grep -E "TARGET|GITHUB" | sort
          echo ""
          
          set -x  # Enable command tracing
          if ./manage.sh --deploy --force --verbose; then
            set +x  # Disable command tracing
            echo "✅ Framework build command completed"
            
            # Check what was actually created
            echo "🔍 Post-build directory contents:"
            ls -la
            echo ""
            echo "🔍 Looking for any generated directories:"
            find . -name "*generated*" -o -name "public" -o -name "*hugo*" -type d 2>/dev/null || echo "No generated directories found"
            echo ""
            echo "🔍 Looking for HTML files:"
            find . -name "*.html" 2>/dev/null | head -10 || echo "No HTML files found"
          else
            set +x  # Disable command tracing
            echo "❌ Build failed for $TARGET_DIR"
            echo ""
            echo "🔍 Post-failure directory contents:"
            ls -la
            echo ""
            echo "🔧 Build failure - checking logs and configuration:"
            echo "• build.yml content shown above"
            echo "• Check if target directory exists: $TARGET_DIR"
            echo "• Check framework structure"
            ls -la framework/ framework/scripts/ 2>/dev/null || echo "Framework structure issue"
            exit 1
          fi

      - name: Verify build output
        run: |
          # Debug: Check current directory and Hugo-related files
          echo "🔍 Current working directory: $(pwd)"
          echo "🔍 Contents of repository root:"
          ls -la
          
          echo "🔍 Contents of hugo_generated directory (if exists):"
          if [[ -d "hugo_generated" ]]; then
            ls -la hugo_generated/
          else
            echo "❌ hugo_generated directory does not exist"
          fi
          
          # Check possible output locations
          echo "🔍 Checking for possible Hugo output locations:"
          POSSIBLE_DIRS=(
            "hugo_generated/public"
            "public"
            "dist"
            "framework_code/hugo_generated/public"
            "$TARGET_DIR/framework_code/hugo_generated/public"
          )
          
          FOUND_OUTPUT=""
          for dir in "${POSSIBLE_DIRS[@]}"; do
            if [[ -d "$dir" ]] && [[ -f "$dir/index.html" ]]; then
              echo "✅ Found Hugo output at: $dir"
              FOUND_OUTPUT="$dir"
              break
            elif [[ -d "$dir" ]]; then
              echo "📁 Directory exists but no index.html: $dir"
              ls -la "$dir/" 2>/dev/null || echo "   (cannot list contents)"
            else
              echo "❌ Not found: $dir"
            fi
          done
          
          if [[ -z "$FOUND_OUTPUT" ]]; then
            echo "❌ Could not find Hugo build output in any expected location"
            echo "🔍 Full directory tree from root:"
            find . -name "index.html" -o -name "public" -type d 2>/dev/null | head -20
            exit 1
          fi
          
          echo "✅ Build output verified at: $FOUND_OUTPUT"
          # Update the output directory for upload step
          echo "HUGO_OUTPUT_DIR=$FOUND_OUTPUT" >> $GITHUB_ENV

      - name: Upload build artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.HUGO_OUTPUT_DIR }}

  # Deployment job
  deploy:
    # Only deploy if auto_deploy is enabled in dna.yml
    if: needs.build.outputs.auto_deploy == 'true'
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        # This action will deploy the artifact from the build job

      - name: Display deployment info
        run: |
          echo "🚀 Framework deployed successfully!"
          echo "📍 Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "👨‍🏫 Professor Profile: ${{ needs.build.outputs.professor_profile }}"
          echo "📂 Built from directory: ${{ needs.build.outputs.target_dir }}"
          echo "👤 GitHub Actor: ${{ github.actor }}"